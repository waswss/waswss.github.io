<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>看过来！😎uni-app的上手实操</title>
      <link href="/2022/04/16/quan-wang-chao-ji-xiang-xi-de-uni-app-shi-yong-xin-de/"/>
      <url>/2022/04/16/quan-wang-chao-ji-xiang-xi-de-uni-app-shi-yong-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h1><blockquote><p><code>uni-app</code>支持通过 可视化界面、<a href="https://uniapp.dcloud.io/quickstart-cli"><code>vue-cli</code>命令行 (opens new window)</a>两种方式快速创建项目。</p></blockquote><p>可视化的方式比较简单，HBuilderX内置相关环境，开箱即用，无需配置nodejs。</p><p>开始之前，开发者需先下载安装如下工具：</p><ul><li>HBuilderX：<a href="https://www.dcloud.io/hbuilderx.html">官方IDE下载地址(opens new window)</a></li></ul><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用；如下载标准版，在运行或发行<code>uni-app</code>时，会提示安装<code>uni-app</code>插件，插件下载完成后方可使用。</p><p>如使用<code>cli</code>方式创建项目，可直接下载标准版，因为uni-app编译插件被安装到项目下了。</p><h2 id="创建uni-app"><a href="#创建uni-app" class="headerlink" title="#创建uni-app"></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%88%9B%E5%BB%BAuni-app">#</a>创建uni-app</h2><p>在点击工具栏里的文件 -&gt; 新建 -&gt; 项目：</p><p><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b925a1c0-4f19-11eb-97b7-0dc4655d6e68.png"></p><p>选择<code>uni-app</code>类型，输入工程名，选择模板，点击创建，即可成功创建。</p><p>uni-app自带的模板有 Hello uni-app ，是官方的组件和API示例。还有一个重要模板是 uni ui项目模板，日常开发推荐使用该模板，已内置大量常用组件。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-90ba-4d30-a6a7-cd4d057327db/d0cba1a3-c0cc-4095-a105-a4fea51857fe.jpg"></p><h2 id="运行uni-app"><a href="#运行uni-app" class="headerlink" title="#运行uni-app"></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E8%BF%90%E8%A1%8Cuni-app">#</a>运行uni-app</h2><ol><li>浏览器运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到浏览器 -&gt; 选择浏览器，即可在浏览器里面体验uni-app 的 H5 版。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/1ad34710-4f1a-11eb-8ff1-d5dcf8779628.png"></li><li>运行App到手机或模拟器：连接手机，开启USB调试，进入hello-uniapp项目，点击工具栏的运行 -&gt; 真机运行 -&gt; 选择运行的设备，即可在该设备里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/3a1faaf0-4f1a-11eb-b680-7980c8a877b8.png"><br>如手机无法识别，请点击菜单运行-运行到手机或模拟器-真机运行常见故障排查指南。 注意目前开发App也需要安装微信开发者工具。</li><li>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/d89fd6f0-4f1a-11eb-97b7-0dc4655d6e68.png"><br><strong>注意</strong>：如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功。如下图，需在输入框输入微信开发者工具的安装路径。 若HBuilderX不能正常启动微信开发者工具，需要开发者手动启动，然后将uni-app生成小程序工程的路径拷贝到微信开发者工具里面，在HBuilderX里面开发，在微信开发者工具里面就可看到实时的效果。<br>uni-app默认把项目编译到根目录的unpackage目录。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/a142b6a0-4f1a-11eb-8a36-ebb87efcf8c0.png"></li><li>在支付宝小程序开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 支付宝小程序开发者工具，即可在支付宝小程序开发者工具里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/fee90480-4f1a-11eb-bd01-97bc1429a9ff.png"></li><li>在百度开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 百度开发者工具，即可在百度开发者工具里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/1be92e70-4f1b-11eb-8a36-ebb87efcf8c0.png"></li><li>在字节跳动开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 字节跳动开发者工具，即可在字节跳动开发者工具里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/42de5370-4f1b-11eb-8ff1-d5dcf8779628.png"></li><li>在360开发工具中导入：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 360开发工具，即可在360开发工具里面体验uni-app。注意360工具只有windows版<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b9edff30-4f37-11eb-97b7-0dc4655d6e68.png"></li><li>在快应用联盟工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 快应用联盟工具，即可在快应用联盟工具里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/bba35050-4f37-11eb-8ff1-d5dcf8779628.png"></li><li>在华为开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 华为开发者工具，即可在华为开发者工具里面体验uni-app。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/bc558950-4f37-11eb-bdc1-8bd33eb6adaa.png"></li><li>在QQ、快手、飞书、京东等小程序开发工具里运行：内容同上，不再重复。</li></ol><p><strong>Tips</strong></p><ul><li>如果是第一次使用，需要配置开发工具的相关路径。点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 运行设置，配置相应小程序开发者工具的路径。</li><li>支付宝/百度/字节跳动/360小程序工具，不支持直接指定项目启动并运行。因此开发工具启动后，请将 HBuilderX 控制台中提示的项目路径，在相应小程序开发者工具中打开。</li><li>如果自动启动小程序开发工具失败，请手动启动小程序开发工具并将 HBuilderX 控制台提示的项目路径，打开项目。</li></ul><p>运行的快捷键是<code>Ctrl+r</code>。</p><p>HBuilderX 还提供了快捷运行菜单，可以按数字快速选择要运行的设备：</p><p><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/aef21b70-4f37-11eb-a16f-5b3e54966275.png"></p><p>如需调试，可参考：<a href="https://uniapp.dcloud.io/tutorial/snippet#%E4%BD%BF%E7%94%A8-chrome-%E8%B0%83%E8%AF%95">uni-app调试</a></p><h2 id="发布uni-app"><a href="#发布uni-app" class="headerlink" title="#发布uni-app"></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83uni-app">#</a>发布uni-app</h2><h3 id="打包为原生App"><a href="#打包为原生App" class="headerlink" title="#打包为原生App"></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E6%89%93%E5%8C%85%E4%B8%BA%E5%8E%9F%E7%94%9Fapp">#</a>打包为原生App</h3><p>在HBuilderX工具栏，点击发行，选择原生app-云端打包，如下图：</p><p><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b8332fd0-4f37-11eb-8ff1-d5dcf8779628.png"></p><p>出现如下界面，点击打包即可。<img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-dc-site/001a20b0-d85a-11ea-81ea-f115fe74321c.png"></p><p>云端打包支持安心打包，保护用户隐私，不会上传代码和证书，通过差量包制作方式实现安心打包。详见：<a href="https://ask.dcloud.net.cn/article/37979">https://ask.dcloud.net.cn/article/37979(opens new window)</a></p><p>云打包也支持cli模式，通过HBuilderX的cli方式（不是uni-app的cli），可以调用命令行打包，方便持续集成。详见：<a href="https://hx.dcloud.net.cn/cli/pack">https://hx.dcloud.net.cn/cli/pack(opens new window)</a></p><p>虽然安心打包已经满足需求，但如仍然希望自己使用 xcode 或 Android studio 进行离线打包，则在 HBuilderX 发行菜单里找到本地打包菜单，生成离线打包资源，然后参考离线打包文档操作：<a href="https://nativesupport.dcloud.net.cn/AppDocs/README">https://nativesupport.dcloud.net.cn/AppDocs/README (opens new window)</a>。</p><p>App打包时，注意如何涉及三方sdk，需进行申请并在manifest.json里配置，否则相关功能无法使用。</p><p>iOS App打包需要向Apple申请证书。</p><h3 id="发布为H5"><a href="#发布为H5" class="headerlink" title="#发布为H5"></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BAh5">#</a>发布为H5</h3><ol><li>在 <code>manifest.json</code> 的可视化界面，进行如下配置（发行在网站根目录可不配置应用基本路径），此时发行网站路径是 <a href="http://www.xxx.com/h5%EF%BC%8C%E5%A6%82%EF%BC%9A[https://hellouniapp.dcloud.net.cn">www.xxx.com/h5，如：[https://hellouniapp.dcloud.net.cn</a> (opens new window)](<a href="https://hellouniapp.dcloud.net.cn/)%E3%80%82">https://hellouniapp.dcloud.net.cn/)。</a><br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/bf90de30-4f37-11eb-8ff1-d5dcf8779628.png"></li><li>在HBuilderX工具栏，点击发行，选择网站-H5手机版，如下图，点击即可生成 H5 的相关资源文件，保存于 unpackage 目录。</li></ol><p><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b7391860-4f37-11eb-8a36-ebb87efcf8c0.png"></p><p><strong>注意</strong></p><ul><li><code>history</code> 模式发行需要后台配置支持，详见：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">history 模式的后端配置(opens new window)</a></li><li>打包后，推荐使用<a href="https://uniapp.dcloud.io/uniCloud/hosting">前端网页托管服务</a>，一键上传，自带CDN加速，无需购买虚拟机，无需安装nginx等；</li><li>若使用传统服务器部署，建议在服务器端开启 <code>gzip</code> 压缩。参考网上的分享：<a href="https://juejin.im/post/5af003286fb9a07aac24611b">https://juejin.im/post/5af003286fb9a07aac24611b</a></li></ul><h3 id="发布为小程序"><a href="#发布为小程序" class="headerlink" title="#发布为小程序"></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为小程序</h3><h4 id="发布为微信小程序："><a href="#发布为微信小程序：" class="headerlink" title="#发布为微信小程序："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为微信小程序：</h4><ol><li>申请微信小程序AppID，参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html#%E7%94%B3%E8%AF%B7%E5%B8%90%E5%8F%B7">微信教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “小程序-微信”，输入小程序名称和appid点击发行即可在 <code>unpackage/dist/build/mp-weixin</code> 生成微信小程序项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b36294f0-4f37-11eb-8a36-ebb87efcf8c0.png"></li><li>在微信小程序开发者工具中，导入生成的微信小程序项目，测试项目代码运行正常后，点击“上传”按钮，之后按照 “提交审核” =&gt; “发布” 小程序标准流程，逐步操作即可，详细查看：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/release.html#%E5%8F%91%E5%B8%83%E4%B8%8A%E7%BA%BF">微信官方教程 (opens new window)</a>。</li></ol><h4 id="发布为百度小程序："><a href="#发布为百度小程序：" class="headerlink" title="#发布为百度小程序："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E7%99%BE%E5%BA%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为百度小程序：</h4><ol start="4"><li>入驻小程序并申请百度小程序AppID，参考：<a href="https://smartprogram.baidu.com/docs/introduction/enter_application/">百度小程序教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “小程序-百度”，输入小程序名称和appid点击发行即可在 <code>/unpackage/dist/build/mp-baidu</code> 生成百度小程序项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b42a03a0-4f37-11eb-8a36-ebb87efcf8c0.png"></li><li>在百度小程序开发者工具中，导入生成的百度小程序项目，测试项目代码运行正常后，点击“上传”按钮上传代码，之后在百度小程序的 <a href="https://smartprogram.baidu.com/developer/applist.html">管理中心 (opens new window)</a>选择创建的应用点击前往发布，选择对应的版本然后提交审核。</li></ol><h4 id="发布为支付宝小程序："><a href="#发布为支付宝小程序：" class="headerlink" title="#发布为支付宝小程序："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为支付宝小程序：</h4><ol start="4"><li>入驻支付宝小程序，参考：<a href="https://docs.alipay.com/mini/introduce">支付宝小程序教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “小程序-支付宝”，即可在 <code>/unpackage/dist/build/mp-alipay</code> 生成支付宝小程序项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/b636c390-4f37-11eb-bd01-97bc1429a9ff.png"></li><li>在支付宝小程序开发者工具中，导入生成的支付宝小程序项目，测试项目代码运行正常后，点击“上传”按钮上传代码，在 <a href="https://open.alipay.com/platform/mini.htm#/app">支付宝小程序后台 (opens new window)</a>，选择刚提交的版本点击提交审核，详见：<a href="https://docs.alipay.com/mini/developer/publish">支付宝小程序文档 (opens new window)</a>。</li></ol><h4 id="发布为字节跳动小程序："><a href="#发布为字节跳动小程序：" class="headerlink" title="#发布为字节跳动小程序："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为字节跳动小程序：</h4><ol><li>入驻字节跳动小程序，参考：<a href="https://developer.toutiao.com/dev/cn/mini-app/introduction/plug-in/registration">字节跳动小程序教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “小程序-字节跳动”，即可在 <code>/unpackage/dist/build/mp-toutiao</code> 生成字节跳动小程序项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/a6ba4ed0-4f39-11eb-b997-9918a5dda011.jpg"></li><li>在字节跳动小程序开发者工具中，导入生成的字节跳动小程序项目，测试项目代码运行正常后，点击“上传”按钮上传代码，在 <a href="https://developer.toutiao.com/app/applist">字节跳动小程序后台 (opens new window)</a>，选择刚提交的版本点击提交审核，详见：<a href="https://developer.toutiao.com/dev/cn/mini-app/introduction/plug-in/verification">字节跳动小程序文档 (opens new window)</a>。</li></ol><h4 id="发布为360小程序："><a href="#发布为360小程序：" class="headerlink" title="#发布为360小程序："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA360%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为360小程序：</h4><ol start="4"><li>入驻360小程序，参考：<a href="https://mp.360.cn/doc/miniprogram/dev/#/">360小程序教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “小程序-360”，即可在 <code>/unpackage/dist/build/mp-360</code> 生成360小程序项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/baba28d0-4f37-11eb-bdc1-8bd33eb6adaa.png"></li><li>在360浏览器中，导入生成的360小程序项目</li></ol><p><strong>注意</strong></p><ul><li>目前仅windows平台支持。360浏览器自身不支持mac平台。</li></ul><h4 id="发布为快应用-webview-："><a href="#发布为快应用-webview-：" class="headerlink" title="#发布为快应用(webview)："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E5%BF%AB%E5%BA%94%E7%94%A8-webview">#</a>发布为快应用(webview)：</h4><ol><li>入驻快应用(webview)，参考：<a href="https://www.quickapp.cn/">快应用(webview)教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “快应用联盟”，即可在 <code>/unpackage/dist/build/quickapp-webview</code> 生成快应用(webview)项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/bd0db5c0-4f37-11eb-8ff1-d5dcf8779628.png"></li><li>在快应用联盟工具中，导入生成的快应用联盟项目，测试项目代码运行正常后，点击”构建“打包正式版，在<a href="https://www.quickapp.cn/">快应用联盟后台 (opens new window)</a>上传</li></ol><h4 id="发布为快应用-webview-华为："><a href="#发布为快应用-webview-华为：" class="headerlink" title="#发布为快应用(webview) - 华为："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BA%E5%BF%AB%E5%BA%94%E7%94%A8-webview-%E5%8D%8E%E4%B8%BA">#</a>发布为快应用(webview) - 华为：</h4><ol start="4"><li>入驻华为快应用，参考：<a href="https://developer.huawei.com/consumer/cn/quickApp">华为快应用教程 (opens new window)</a>。</li><li>在HBuilderX中顶部菜单依次点击 “发行” =&gt; “快应用-华为”，即可在 <code>/unpackage/dist/build/quickapp-webview</code> 生成华为快应用项目代码。<br><img src="https://bjetxgzv.cdn.bspapp.com/VKCEYUGU-uni-app-doc/bece2a70-4f37-11eb-8ff1-d5dcf8779628.png"></li><li>在华为开发者工具中，导入生成的华为快应用项目，测试项目代码运行正常后，点击”构建“打包正式版，在<a href="https://developer.huawei.com/consumer/cn/quickApp">华为快应用后台 (opens new window)</a>上传。</li></ol><h4 id="发布为QQ、快手、飞书、京东小程序："><a href="#发布为QQ、快手、飞书、京东小程序：" class="headerlink" title="#发布为QQ、快手、飞书、京东小程序："></a><a href="https://uniapp.dcloud.io/quickstart-hx.html#%E5%8F%91%E5%B8%83%E4%B8%BAqq%E3%80%81%E5%BF%AB%E6%89%8B%E3%80%81%E9%A3%9E%E4%B9%A6%E3%80%81%E4%BA%AC%E4%B8%9C%E5%B0%8F%E7%A8%8B%E5%BA%8F">#</a>发布为QQ、快手、飞书、京东小程序：</h4><p>内容同上，不再重复。</p><p>发布的快捷键是<code>Ctrl+u</code>。同样可拉下快速发布菜单并按数字键选择。</p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 小程序 </tag>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringBoot2.x 单元测试总结</title>
      <link href="/2022/04/15/ji-yu-springboot2-x-dan-yuan-ce-shi-zong-jie/"/>
      <url>/2022/04/15/ji-yu-springboot2-x-dan-yuan-ce-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个 bug 被隐藏的时间越长，修复这个 bug 的代价就越大。</p></blockquote><p>我曾经在 <a href="https://blinkfox.github.io/2018/11/15/hou-duan/java/dan-yuan-ce-shi-zhi-nan/">单元测试指南</a> 一文中写到过单元测试的必要性和 Java 单元测试相关的工具及方法。单元测试能帮助我们在早期就规避、发现和修复很多不易察觉的 bug 和漏洞，而且更能保障后期的需求变动和代码重构时所带来的隐患，减少测试成本和维护成本。在 SpringBoot2.x 集成和写单元测试更加容易了。</p><h2 id="创建-SpringBoot2-x-项目"><a href="#创建-SpringBoot2-x-项目" class="headerlink" title="创建 SpringBoot2.x 项目"></a>创建 SpringBoot2.x 项目</h2><p>在 <a href="https://start.spring.io/">start.spring.io</a> 中创建一个自己的 SpringBoot2.x 项目，目前版本<code>2.1.3</code>。选出自己需要的一些组件生成项目即可，我这里选了如下几个：</p><ul><li><code>Web</code>: Web项目</li><li><code>JPA</code>: 数据库持久层采用<a href="https://spring.io/guides/gs/accessing-data-jpa/">Spring Data JPA</a>，方便实用</li><li><code>Lombok</code>: 可以通过注解大量减少Java中重复代码的书写</li><li><code>HSQLDB</code>: 内存数据库，用来对 <code>Repository</code> 层做单元测试</li></ul><p>生成之后可以在 <code>pom.xml</code> 中看到 SpringBoot2.x 项目中已经引入了<code>spring-boot-starter-test</code>这个启动组件，包含了几乎绝大多数测试场景需要的组件。然后通过<code>mvn clean install</code>来构建本项目或者直接导入 IDE 开发工具即可。</p><p>下面将以对博客信息做简单修改和查询为示例来说明在 Spring Boot 中如何分别对 <code>DAO</code>，<code>Service</code>，<code>Controller</code> 做单元测试。</p><h2 id="DAO-层的单元测试"><a href="#DAO-层的单元测试" class="headerlink" title="DAO 层的单元测试"></a>DAO 层的单元测试</h2><h3 id="新建数据库脚本"><a href="#新建数据库脚本" class="headerlink" title="新建数据库脚本"></a>新建数据库脚本</h3><p>DAO 层的测试我这里采用的是 <code>HSQLDB</code> 的内存数据库，最好准备一些初始化的数据表结构和脚本，当然也可用直接通过官方示例的 <code>JPA</code>特性和 API 代码来初始化数据。这里我还是通过脚本的方式来做，便于统一管理和维护表结构和数据。</p><p>在 <code>src/test</code> 目录下新建 <code>resources</code> 资源目录，并在 <code>resources</code> 目录下新建 <code>db</code> 目录，在 <code>db</code> 目录下分别，新建用于管理的表结构文件(<code>schema.sql</code>)和初始化数据文件(<code>data.sql</code>)的 SQL 脚本。</p><p><code>schema.sql</code> 文件中的内容如下：</p><p>sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建数据库表所在的模式 schema.</span><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> test<span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 在 test 模式下创建数据库表.</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> test<span class="token punctuation">.</span>t_test_blog<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span>t_test_blog <span class="token punctuation">(</span>    c_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    c_author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c_content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dt_publish_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    c_title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c_url <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    n_status <span class="token keyword">int</span><span class="token punctuation">,</span>    c_create_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dt_create_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    dt_update_time <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk_test_blog <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>data.sql</code> 文件中的内容如下：</p><p>sql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 初始化插入一些博客信息数据.</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">.</span>t_test_blog <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'这是内容'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:01'</span><span class="token punctuation">,</span> <span class="token string">'Spring从入门到精通'</span><span class="token punctuation">,</span> <span class="token string">'https://baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:33'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:36'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test<span class="token punctuation">.</span>t_test_blog <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'这是Mybatis的内容'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:01'</span><span class="token punctuation">,</span> <span class="token string">'Mybatis基础'</span><span class="token punctuation">,</span> <span class="token string">'https://qq.com'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:33'</span><span class="token punctuation">,</span> <span class="token string">'2019-03-01 00:41:36'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加-yaml-配置文件及内容"><a href="#增加-yaml-配置文件及内容" class="headerlink" title="增加 yaml 配置文件及内容"></a>增加 yaml 配置文件及内容</h3><p>在 <code>resources</code> 目录下新建 <code>application-hsqldb.yml</code> 配置文件，用于存放 HSQLDB 及 JPA 相关的配置信息，主要配置内容如下：</p><p>yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>hsqldb<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>db_test <span class="token comment"># 以内存数据库的方式来运行.</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.hsqldb.jdbc.JDBCDriver    <span class="token key atrule">platform</span><span class="token punctuation">:</span> hsqldb    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema.sql    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data.sql  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> none <span class="token comment"># 这里没用 JPA 的自动生成表结构等功能，你可以视自己的具体情况来开启.</span>    <span class="token key atrule">generate-ddl</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 启动时是否初始化数据库.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备实体-POJO-和-DAO-层-Repository-类"><a href="#准备实体-POJO-和-DAO-层-Repository-类" class="headerlink" title="准备实体 POJO 和 DAO 层 Repository 类"></a>准备实体 POJO 和 DAO 层 Repository 类</h3><p>博客信息的实体 POJO 类如下：</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Column</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span><span class="token punctuation">;</span><span class="token comment">/** * 博客实体. * * @author blinkfox on 2019-2-26. */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_test_blog"</span><span class="token punctuation">,</span> schema <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * ID.     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 作者.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_author"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token comment">/**     * 标题.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_title"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token comment">/**     * 内容.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_content"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token comment">/**     * 发布时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_publish_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> publishTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 链接地址.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_url"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token comment">/**     * 状态.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"n_status"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建用户.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"c_create_user"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createUser<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 最后更新时间.     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dt_update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 <code>BlogRepository</code> 中的一个简单的自定义 <code>@Query</code> 查询，当然你也可以采用名称的规则来写本查询，我这里为了做示例，使用了 <code>@Query</code> 查询。</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">Query</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token comment">/** * BlogRepository. * * @author blinkfox on 2019-02-27. */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT b FROM Blog AS b WHERE b.title like 'Spring%'"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> <span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BlogRepository-的单元测试"><a href="#BlogRepository-的单元测试" class="headerlink" title="BlogRepository 的单元测试"></a>BlogRepository 的单元测试</h3><p>然后在 Intellij IDEA 中通过 <code>Ctrl + Shift + T</code> 来为 <code>BlogRepository</code> 生成它对应的单元测试类 <code>BlogRepositoryTest</code>。</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">DataJpaTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token comment">/** * BlogRepositoryTest. * * @author blinkfox on 2019-03-01. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"hsqldb"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DataJpaTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogRepositoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">BlogRepository</span> blogRepository<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试新增博客的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"newblogId"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">"Java 从入门到放弃"</span><span class="token punctuation">;</span>        blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogOptional <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> title<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 测试查询所有 Spring 相关的博客信息.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogs <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Spring从入门到精通"</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了 DAO 层代码的测试，以上程序主要依托于内存数据库 HSQLDB 和 Spring Data JPA。</p><h2 id="Service-层的单元测试"><a href="#Service-层的单元测试" class="headerlink" title="Service 层的单元测试"></a>Service 层的单元测试</h2><p>实际开发过程中，Service 层中的类依赖了 DAO 层中的类或其他 Service 类。为了隔离对其他 Service 类或 DAO 层中的类的依赖，只测试本 Service 类中的方法逻辑，就需要 Mock 数据和做打桩等操作。Spring Boot 中原生集成了 <a href="https://site.mockito.org/">Mockito</a>，可以非常方便我们对 Java 代码做单元测试。</p><h3 id="新建-BlogService-类"><a href="#新建-BlogService-类" class="headerlink" title="新建 BlogService 类"></a>新建 BlogService 类</h3><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">BlogRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/** * BlogService. * * @author blinkfox on 2019-03-01. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">BlogRepository</span> blogRepository<span class="token punctuation">;</span>    <span class="token comment">/**     * 查询所有 Spring 相关的博客信息.     *     * @return 博客信息     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入了获取 Spring 相关博客的 Service 方法."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据博客ID来修改该博客的名称.     *     * @param id 博客ID     * @param title 博客标题     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogOptional <span class="token operator">=</span> blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>blogOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"需要修改名称的博客不存在，id为【{}】请检查！"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>blogOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BlogService-的单元测试"><a href="#BlogService-的单元测试" class="headerlink" title="BlogService 的单元测试"></a>BlogService 的单元测试</h3><p>通过 <code>BlogService</code> 可以生成和书写出其对应的单元测试类和测试方法，代码如下：</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">BlogRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">InjectMocks</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">MockitoJUnitRunner</span><span class="token punctuation">;</span><span class="token comment">/** * BlogServiceTest. * * @author blinkfox on 2019-03-01. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">MockitoJUnitRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mock</span>    <span class="token keyword">private</span> <span class="token class-name">BlogRepository</span> blogRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@InjectMocks</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试service层中获取Spring相关博客的方法.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 构造需要返回的博客信息集合数据.</span>        <span class="token class-name">Blog</span> blog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring Action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">querySpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>blogList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogs <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 断言验证查询到的数据.</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blogs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Spring Action"</span><span class="token punctuation">,</span> blog<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 测试根据博客ID来修改该博客的名称成功时的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Mock 相关数据和类方法的行为.</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"算法导论"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证 blogRepository.save(s) 方法被调用过一次.</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 测试根据博客ID来修改该博客的名称失败时的情况.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileByIdWithFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Mock 未根据 ID 找到对应的博客信息的情况.</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"算法导论"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证 blogRepository.save(s) 方法并没有被调用过.</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>blogRepository<span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong>：这里的 <code>@RunWith</code> 采用的是 Mocktio 提供的 <code>MockitoJUnitRunner</code>。</p></blockquote><p>这样就完成了 Service 层的单元测试，也是我们业务开发中需要重点关注和测试业务逻辑的一层。</p><h2 id="Controller-层的单元测试"><a href="#Controller-层的单元测试" class="headerlink" title="Controller 层的单元测试"></a>Controller 层的单元测试</h2><p>Controller 层测试的重点是测试接口是否能正常工作。可以用到 Spring Boot 中提供的 <code>@WebMvcTest</code> 注解来模拟 Web 层的单元测试。当然，也需要通过 Mock 的方式类隔离对 Service 层各个类的依赖影响。</p><h3 id="新建-BlogController-类"><a href="#新建-BlogController-类" class="headerlink" title="新建 BlogController 类"></a>新建 BlogController 类</h3><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">BlogService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PatchMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token comment">/** * BlogController. * * @author blinkfox on 2019-02-28. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 获取所有 Spring 相关的博客信息.     *     * @return Spring相关的博客信息     */</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据博客ID修改博客名称.     *     * @param id 博客ID     * @param title 博客标题     * @return 空     */</span>    <span class="token annotation punctuation">@PatchMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            blogService<span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"修改博客名称成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改博客名称出错，id为【{}】."</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BlogController-的单元测试"><a href="#BlogController-的单元测试" class="headerlink" title="BlogController 的单元测试"></a>BlogController 的单元测试</h3><p>通过 <code>BlogController</code> 可以生成和书写出其对应的单元测试类和测试方法，代码如下：</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>patch<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>blinkfox<span class="token punctuation">.</span>springbootsample<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">BlogService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">WebMvcTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span><span class="token punctuation">;</span><span class="token comment">/** * BlogControllerTest. * * @author blinkfox on 2019-03-02. */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">BlogController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlogControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MockBean</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试获取所有 Spring 相关的博客信息.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">.</span><span class="token function">getSpringBlogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 测试修改博客标题成功时的情况.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/blogs/1?title=Spring实战"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 测试修改博客标题失败时的情况.     *     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyTitileByIdWithException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>blogService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modifyTitileById</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"/blogs/1?title=Spring实战"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就完成了对 Controller 层的单元测试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Spring Boot 中做单元测试的将会非常容易。上面只是 Spring Boot 中提供的部分方式，<a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/#boot-features-testing">Spring Boot 文档</a> 中还有其他更多的测试场景和测试方法供你去参考和使用。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> 单元测试 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于java集合框架知识的整理</title>
      <link href="/2022/04/15/guan-yu-java-ji-he-kuang-jia-zhi-shi-de-zheng-li/"/>
      <url>/2022/04/15/guan-yu-java-ji-he-kuang-jia-zhi-shi-de-zheng-li/</url>
      
        <content type="html"><![CDATA[<p>Java集合框架主要由<code>Collection</code>和<code>Map</code>两个根接口及其子接口、实现类组成。</p><h2 id="集合类关系梳理"><a href="#集合类关系梳理" class="headerlink" title="集合类关系梳理"></a>集合类关系梳理</h2><ul><li><code>Collection</code>接口继承了<code>Iterable</code>接口，依赖了<code>Predicate</code>、<code>Spliterator</code>、<code>Stream</code>接口（这些均为<code>Java8</code>新增），<code>Iterable</code>接口依赖了<code>Iterator</code>接口。<ul><li><code>List</code>接口继承自<code>Collection</code>接口,依赖了<code>UnaryOperator</code>接口（<code>Java8</code>新增）、<code>ListIterator</code>、<code>Comparator</code>接口</li><li><code>Queue</code>接口继承了<code>Collection</code>接口<ul><li><code>Deque</code>接口继承了<code>Queue</code>接口</li><li><code>BlockingQueue</code>接口继承了<code>Queue</code>接口<ul><li><code>BlockingDeque</code>接口继承了<code>BlockingQueue</code>、<code>Deque</code>接口</li><li><code>TransferQueue</code>接口继承了<code>BlockingQueue</code>接口</li></ul></li></ul></li><li><code>AbstractCollection</code>抽象类实现了<code>Collection</code>接口，<ul><li><code>AbstractList</code>抽象类继承了<code>AbstractCollection</code>抽象类，实现了<code>List</code>接口，依赖了<code>List</code>、<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code>接口<ul><li><code>ArrayList</code>类继承了<code>AbstractList</code>抽象类，实现了<code>List</code>、<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code>接口</li><li><code>AbstractSequentialList</code>抽象类继承了<code>AbstractList</code>抽象类<ul><li><code>LinkedList</code>类继承了<code>AbstractSequentialList</code>抽象类，实现了<code>List</code>、<code>Deque</code>、<code>Cloneable</code>、<code>Serializable</code>接口</li></ul></li><li><code>CopyOnWriteArrayList</code>实现了<code>List</code>、<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code>接口</li><li><code>Vector</code>类继承了<code>AbstractList</code>抽象类，实现了<code>List</code>、<code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code>接口<ul><li><code>Stack</code>类继承了<code>Vector</code>类</li></ul></li></ul></li><li><code>AbstractQueue</code>抽象类继承了<code>AbstractCollection</code>接口，实现了<code>Queue</code>接口<ul><li><code>SynchronousQueue</code>类继承了<code>AbstractQueue</code>接口，实现了<code>BlockingQueue</code>、<code>Serializable</code>接口，依赖了<code>Collection</code>、<code>Spliterator</code>接口</li><li><code>ArrayBlockingQueue</code>类继承了<code>AbstractQueue</code>接口，实现了<code>BlockingQueue</code>、<code>Serializable</code>接口</li><li><code>LinkedBlockingQueue</code>类继承了<code>AbstractQueue</code>接口，实现了<code>BlockingQueue</code>、<code>Serializable</code>接口</li><li><code>PriorityBlockingQueue</code>类继承了<code>AbstractQueue</code>接口，实现了<code>BlockingQueue</code>、<code>Serializable</code>接口，聚合了<code>Comparator</code>接口，依赖了<code>Collection</code>、<code>Comparator</code>、<code>Comparable</code>接口</li><li><code>DelayQueue</code>类继承了<code>AbstractQueue</code>接口，实现了<code>BlockingQueue</code>接口</li><li><code>LinkedBlockingDeque</code>类继承了<code>AbstractQueue</code>接口，实现了<code>BlockingDeque</code>、<code>Serializable</code>接口</li><li><code>PriorityQueue</code>类继承了<code>AbstractQueue</code>接口</li><li><code>LinkedTransferQueue</code>类继承了<code>AbstractQueue</code>接口，实现了<code>TransferQueue</code>、<code>Serializable</code>接口（Java7新增）</li></ul></li><li><code>ConcurrentLinkedDeque</code>类继承了<code>AbstractCollection</code>抽象类，实现了<code>Deque</code>、<code>Cloneable</code>、<code>Serializable</code>接口</li><li><code>ArrayDeque</code>类继承了<code>AbstractCollection</code>抽象类，实现了<code>Deque</code>、<code>Serializable</code>接口</li></ul></li><li><code>Set</code>接口继承自<code>Collection</code>接口<ul><li><code>AbstractSet</code>抽象类继承了<code>AbstractCollection</code>抽象类，实现了<code>Set</code>接口<ul><li><code>HashSet</code>类继承了<code>AbstractSet</code>抽象类，实现了<code>Set</code>、<code>Cloneable</code>、<code>Serializable</code>接口，聚合了<code>HashMap</code><ul><li><code>LinkedHashSet</code>类继承了<code>HashSet</code>类，实现了<code>Set</code>、<code>Cloneable</code>、<code>Serializable</code>接口</li></ul></li><li><code>TreeSet</code>类继承了<code>AbstractSet</code>抽象类，实现了<code>NavigableSet</code>、<code>Cloneable</code>、<code>Serializable</code>接口，聚合了<code>NavigableMap</code>，依赖了<code>Comparator</code>、<code>SortedSet</code>接口</li><li><code>EnumSet</code>抽象类继承了<code>AbstractSet</code>抽象类，实现了<code>Cloneable</code>、<code>Serializable</code>接口，依赖了<code>Comparator</code>、<code>SortedSet</code>接口<ul><li><code>RegularEnumSet</code>类继承了<code>EnumSet</code>抽象类</li><li><code>JumboEnumSet</code>类继承了<code>EnumSet</code>抽象类</li></ul></li><li><code>ConcurrentSkipListSet</code>类继承了<code>AbstractSet</code>抽象类，实现了<code>NavigableSet</code>、<code>Cloneable</code>、<code>Serializable</code>接口</li><li><code>CopyOnWriteArraySet</code>类继承了<code>AbstractSet</code>抽象类，实现了<code>Serializable</code>接口，聚合了<code>CopyOnWriteArrayList</code>类，依赖了<code>Predicate</code>、<code>Consumer</code>接口</li></ul></li><li><code>SortedSet</code>接口继承自<code>Set</code>接口，依赖了<code>Comparator</code>接口<ul><li><code>NavigableSet</code>接口继承自<code>SortedSet</code>接口(Java6新增)</li></ul></li></ul></li></ul></li><li><code>Map</code>接口依赖了<code>Set</code>、<code>Collection</code>、<code>BiConsumer</code>、<code>Function</code>、<code>BiFunction</code>接口，<code>Map.Entry</code>是Map中的内部接口<ul><li><code>AbstractMap</code>抽象类实现了<code>Map</code>接口，聚合了<code>Collection</code>、<code>Set</code>接口<ul><li><code>HashMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>Map</code>、<code>Cloneable</code>、<code>Serializable</code>接口，依赖了<code>Collection</code>、<code>Set</code>接口<ul><li><code>LinkedHashMap</code>继承了<code>HashMap</code>类，实现了<code>Map</code>接口，依赖了<code>Collection</code>、<code>Set</code>、<code>Consumer</code>、<code>BiConsumer</code>接口</li></ul></li><li><code>TreeMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>NavigableMap</code>、<code>Cloneable</code>、<code>Serializable</code>接口，依赖了<code>Comparator</code>、<code>SortedMap</code>、<code>Collection</code>、<code>Set</code>、<code>BiConsumer</code>、<code>BiFunction</code>接口</li><li><code>EnumMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>Cloneable</code>、<code>Serializable</code>接口，依赖了<code>AbstractSet</code>类，<code>Collection</code>、<code>Set</code>接口</li><li><code>WeakHashMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>Map</code>接口，依赖了<code>Collection</code>、<code>Set</code>、<code>Consumer</code>、<code>BiConsumer</code>、<code>BiFunction</code>接口</li><li><code>IdentityHashMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>Map</code>、<code>Serializable</code>、<code>Cloneable</code>接口，依赖了<code>Collection</code>、<code>Set</code>、<code>Consumer</code>、<code>BiConsumer</code>、<code>BiFunction</code>接口</li><li><code>ConcurrentHashMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>ConcurrentMap</code>、<code>Serializable</code>接口，依赖了<code>Comparable</code>、<code>ParameterizedType</code>、<code>Collection</code>、<code>Set</code>、<code>Spliterator</code>、<code>Consumer</code>、<code>BiConsumer</code>、<code>Function</code>、<code>BiFunction</code>、<code>ToDoubleFunction</code>、<code>DoubleBinaryOperator</code>等接口</li><li><code>ConcurrentSkipListMap</code>类继承了<code>AbstractMap</code>抽象类，实现了<code>ConcurrentNavigableMap</code>、<code>Cloneable</code>、<code>Serializable</code>接口，聚合了<code>Comparator</code>接口，依赖了<code>Collection</code>、<code>Set</code>、<code>Consumer</code>、<code>BiConsumer</code>、<code>BiFunction</code>、<code>NavigableSet</code>接口</li></ul></li><li><code>SortedMap</code>接口继承自<code>Map</code>接口，依赖了<code>Set</code>、<code>Collection</code>、<code>Comparator</code>接口<ul><li><code>NavigableMap</code>接口继承了<code>SortedMap</code>接口，依赖了<code>NavigableSet</code>接口</li><li><code>ConcurrentNavigableMap</code>接口继承了<code>ConcurrentMap</code>、<code>NavigableMap</code>接口，聚合了<code>NavigableSet</code>接口</li></ul></li><li><code>ConcurrentMap</code>接口继承了<code>Map</code>接口，依赖了<code>BiConsumer</code>、<code>BiFunction</code>接口</li><li><code>Hashtable</code>类继承了<code>Dictionary</code>抽象类，实现了<code>Map</code>、<code>Cloneable</code>、<code>Serializable</code>接口，聚合了<code>Collection</code>、<code>Set</code>接口，依赖了<code>Enumeration</code>、<code>BiConsumer</code>、<code>BiFunction</code>接口<ul><li><code>Properties</code>类继承了<code>Hashtable</code>类</li></ul></li></ul></li><li><code>Collections</code>是<code>Collection</code>的辅助工具类，依赖了上述大多数接口和类</li><li><code>Arrays</code>是数组的辅助工具类，依赖了上述一些接口和类</li></ul><h2 id="集合UML关系图"><a href="#集合UML关系图" class="headerlink" title="集合UML关系图"></a>集合UML关系图</h2><p>Java Collection UML类关系图如下：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/24/java-collection-uml.png" alt="Java Collection UML类关系图"><strong>Java Collection UML类关系图</strong></p><p>Java Map UML类关系图如下：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/24/java-map-uml.png" alt="Java Map UML类关系图"><strong>Java Map UML类关系图</strong></p><h2 id="各集合接口、类的介绍"><a href="#各集合接口、类的介绍" class="headerlink" title="各集合接口、类的介绍"></a>各集合接口、类的介绍</h2><ul><li><code>Collection</code>：<code>Collection</code>是最基本集合接口，它定义了一组允许重复的对象。<code>Collection</code>接口派生了三个子接口<code>List</code>、<code>Set</code>和<code>Queue</code>。<code>Collection</code>所有实现类的遍历都可以使用<code>Iterator</code>接口或者是<code>foreach</code>来循环。<ul><li><code>List</code>：<code>List</code>代表有序、可重复的集合。<ul><li><code>ArrayList</code>：底层使用数组的形式来实现，排列有序可重复，查询速度快、增删数据慢，线程不安全，效率高。<code>ArrayList</code>创建时的大小为<code>0</code>；当加入第一个元素时，进行第一次扩容时，默认容量大小为<code>10</code>，每次扩容都以当前数组大小的1.5倍去扩容。</li><li><code>Vector</code>：底层使用数组的形式来实现，排列有序可重复，查询速度快、增删数据慢，线程安全，效率低。<code>Vector</code>创建时的默认大小为<code>10</code>；<code>Vector</code>每次扩容都以当前数组大小的<code>2</code>倍去扩容。当指定了<code>capacityIncrement</code>之后，每次扩容仅在原先基础上增加<code>capacityIncrement</code>个单位空间。<code>ArrayList</code>和<code>Vector</code>的<code>add</code>、<code>get</code>、<code>size</code>方法的复杂度都为<code>O(1)</code>，<code>remove</code>方法的复杂度为<code>O(n)</code>。<ul><li><code>Stack</code>：<code>Vector</code>的一个子类，是标准的<strong>先进后出</strong>(FILO, First In Last Out)的栈。底层通过数组实现的，线程安全。</li></ul></li><li><code>LinkedList</code>：底层使用双向循环链表的数据结构来实现，排列有序可重复，查询速度慢、增删数据快，线程不安全。</li><li><code>CopyOnWriteArrayList</code>：底层使用<code>Copy-On-Write</code>的优化策略实现，适用于<strong>读多写少</strong>的场景，同<code>ArrayList</code>功能相似，线程安全。<code>CopyOnWriteArrayList</code>在某些情况下比<code>Collections.synchronizedList(List list)</code>有更好的性能。缺点是：内存占用大和数据一致性问题，只能保证最终一致性。</li></ul></li><li><code>Set</code>：<code>Set</code>代表无序、不可重复的集合。<ul><li><code>HastSet</code>：底层使用<code>Hash</code>表来实现，内部使用了<code>HashMap</code>，排列无序不可重复，存取速度快，线程不安全。<ul><li><code>LinkedHashSet</code>：底层采用<code>Hash</code>表存储，并用双向链表记录插入顺序，排列有序不可重复，存取速度较<code>HashSet</code>略慢，比<code>TreeSet</code>快，线程不安全。</li></ul></li><li><code>TreeSet</code>：底层使用红黑树来实现，内部使用了<code>NavigableMap</code>，按自然顺序或者自定义顺序存放、不可重复，线程不安全。</li><li><code>CopyOnWriteArraySet</code>：底层使用<code>Copy-On-Write</code>的优化策略实现，适用于<strong>读多写少</strong>的场景，内部使用了<code>CopyOnWriteArrayList</code>，同<code>HastSet</code>功能相似，线程安全。</li><li><code>ConcurrentSkipListSet</code>：底层使用<strong>跳跃列表</strong>来实现，适用于<strong>高并发</strong>的场景，内部使用了<code>ConcurrentNavigableMap</code>，同<code>TreeSet</code>功能相似，线程安全。</li><li><code>EnumSet</code>：是抽象类，只能用来存储Enum常量或其子类，不能存储其它类型，<code>EnumSet</code>有两种实现方式，<code>RegularEnumSet</code>和<code>JumboEnumSet</code>，但是这两种实现方式是包<strong>私有</strong>的，不能在包外访问，因此必须使用工厂方法来创建并返回<code>EnumSet</code>实例，不能通过构造函数来创建。<code>EnumSet</code>中提供了多种创建<code>EnumSet</code>实例的静态工厂方法，例如<code>of</code>方法（进行了函数重载），<code>copyOf</code>方法，<code>noneOf</code>方法等。存储效率快，线程不安全。存储枚举常量时使用<code>EnumSet</code>而不要用<code>HashSet</code>。</li></ul></li><li><code>Queue</code>：<code>Queue</code>是Java 5之后增加的集合体系，表示<strong>队列</strong>集合的相关实现，大多遵循<strong>先进先出</strong>(FIFO, First-In-First-Out)的模式。<ul><li><code>PriorityQueue</code>：即优先队列，底层基于<strong>优先堆的一个无界队列</strong>来实现，无界但可选容量界限。这个优先队列中的元素可以默认自然排序或者通过提供的<code>Comparator</code>（比较器）在队列实例化的时排序，而不是先进先出。不允许空值、不支持<code>non-comparable</code>（不可比较）的对象，每次从队列中取出的是具有最高优先权的元素，线程不安全。</li><li><code>ArrayBlockingQueue</code>：底层基于<strong>定长数组</strong>的阻塞队列实现，即是线程安全的有界阻塞队列。<code>ArrayBlockingQueue</code>内部通过<strong>互斥锁</strong>保护竞争资源，实现了多线程对竞争资源的互斥访问。队列中的锁是没有分离的，所以在添加的同时就不能读取，读取的同时就不能添加，所以锁方面性能不如<code>LinkedBlockingQueue</code>。</li><li><code>LinkedBlockingQueue</code>：即链接队列，底层基于<strong>单向链表</strong>的阻塞队列实现，无界但可选容量界限，线程安全。队列中的锁是分离的，即添加用的是<code>putLock</code>，获取是<code>takeLock</code>，所以在添加获取方面理论上性能会高于<code>ArrayBlockingQueue</code>。所以<code>LinkedBlockingQueue</code>更适合实现生产者-消费者队列。</li><li><code>PriorityBlockingQueue</code>：即优先阻塞队列，底层基于<strong>优先堆的一个无界队列</strong>来实现，无界但可选容量界限的阻塞队列，线程安全，功能同<code>PriorityQueue</code>、<code>LinkedBlockQueue</code>相似。其所含对象的排序不是先进先出，而是依据对象的自然排序顺序或者是构造函数的<code>Comparator</code>决定的顺序。</li><li><code>SynchronousQueue</code>：即同步队列，是一种线程安全无缓冲的无界阻塞队列。其操作必须是放和取交替完成的，即每个<code>put</code>必须等待一个<code>take</code>，反之亦然。</li><li><code>DelayQueue</code>：即延迟队列，是一种有序无界阻塞队列，只有在延迟期满时才能从中提取元素，线程安全。</li><li><code>ArrayDeque</code>：底层采用了循环数组的方式来完成双端队列的实现，无限扩展且可选容量。Java已不推荐使用<code>Stack</code>，而是推荐使用更高效的<code>ArrayDeque</code>来实现栈的功能，非线程安全。</li><li><code>LinkedBlockingDeque</code>：底层采用了<strong>双向链表</strong>实现的<strong>双端阻塞并发</strong>队列，无限扩展且可选容量。该阻塞队列同时支持<code>FIFO</code>和<code>FILO</code>两种操作方式，即可以从队列的头和尾同时操作(插入/删除)，且线程安全。</li><li><code>ConcurrentLinkedDeque</code>：底层采用了<strong>双向链表</strong>实现的<strong>双端非阻塞并发</strong>队列，无限扩展且可选容量。该队列同时支持<code>FIFO</code>和<code>FILO</code>两种操作方式，即可以从队列的头和尾同时操作(插入/删除)，且线程安全。</li><li><code>LinkedTransferQueue</code>：底层采用了<strong>单向链表</strong>实现的<strong>无界传输阻塞</strong>队列，先进先出，无限扩展且可选容量线程安全。</li></ul></li></ul></li><li><code>Map</code>：<code>Map</code>代表具有映射关系的集合。<ul><li><code>HashMap</code>：底层是用<strong>链表数组</strong>，<code>Java8</code>后又加了<strong>红黑树</strong>来实现，键无序不可重复可为null、值可重复可为null，存取速度快，线程不安全。<ul><li><code>LinkedHashMap</code>：底层是用<strong>链表数组</strong>存储，并用双向链表记录插入顺序，键有序不可重复可为null、值可重复可为null，存取速度快较<code>HashMap</code>略慢，比<code>TreeMap</code>快，线程不安全。</li></ul></li><li><code>HashTable</code>：底层是用<strong>链表数组</strong>，键无序不可重复可为null、值可重复可为null，存取速度较<code>HashMap</code>慢，线程安全。<ul><li><code>Properties</code>：是<code>HashTable</code>的子类，是&lt;String,String&gt;的映射，比<code>HashTable</code>多了<code>load</code>、<code>store</code>两个方法，线程安全。</li></ul></li><li><code>TreeMap</code>：底层使用红黑树来实现，内部使用了<code>Comparator</code>，按自然顺序或自定义顺序存放键，键不可重复不可为null、值可重复可为null，存取速度较<code>HashMap</code>慢，线程不安全。</li><li><code>EnumMap</code>：底层使用数组来实现，是专门为枚举类型量身定做的Map，性能更好。只能接收同一枚举类型的实例作为键值，并且由于枚举类型实例的数量相对固定并且有限，所以<code>EnumMap</code>使用数组来存放与枚举类型对应的值，线程不安全。</li><li><code>WeakHashMap</code>：同<code>HashMap</code>基本相似。区别在于，<code>HashMap</code>的<code>key</code>保留对象的强引用，这意味着只要该<code>HashMap</code>对象不被销毁，该<code>HashMap</code>对象所有key所引用的对象不会被垃圾回收，<code>HashMap</code>也不会自动删除这些<code>key</code>所对应的<code>key-value</code>对象；但<code>WeakHashMap</code>的<code>key</code>只保留对实际对象的弱引用，这意味着当垃圾回收了该<code>key</code>所对应的实际对象后，<code>WeakHashMap</code>会自动删除该<code>key</code>对应的<code>key-value</code>对象。</li><li><code>IdentityHashMap</code>：同<code>HashMap</code>基本相似。区别在于，在处理两个<code>key</code>相等时，对于普通<code>HashMap</code>而言，只要<code>key1</code>和<code>key2</code>通过<code>equals</code>比较返回<code>true</code>时就认为key相同；在<code>IdentityHashMap</code>中，当且仅当两个<code>key</code>严格相等时(<code>key1 = key2</code>)时才认为两个<code>key</code>相同。</li><li><code>ConcurrentHashMap</code>：底层使用<strong>锁分段</strong>技术来实现线程安全，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。<code>ConcurrentHashMap</code>是由<code>Segment</code>数组结构和<code>HashEntry</code>数组结构组成。<code>Segment</code>是一种可重入锁<code>ReentrantLock</code>，在<code>ConcurrentHashMap</code>里扮演锁的角色，<code>HashEntry</code>则用于存储键值对数据。一个<code>ConcurrentHashMap</code>里包含一个<code>Segment</code>数组，<code>Segment</code>的结构和<code>HashMap</code>类似，是一种数组和链表结构， 一个<code>Segment</code>里包含一个<code>HashEntry</code>数组，每个<code>HashEntry</code>是一个链表结构的元素， 每个<code>Segment</code>守护者一个<code>HashEntry</code>数组里的元素,当对<code>HashEntry</code>数组的数据进行修改时，必须首先获得它对应的<code>Segment</code>锁。</li><li><code>ConcurrentSkipListMap</code>：底层使用<strong>跳跃列表</strong>来实现，适用于<strong>高并发</strong>的场景，内部使用了<code>ConcurrentNavigableMap</code>，同<code>TreeMap</code>功能相似，是一个并发的、可排序的Map，线程安全。因此它可以在多线程环境中弥补<code>ConcurrentHashMap</code>不支持排序的问题。</li></ul></li></ul><p>Java集合框架功能介绍思维导图如下：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/24/java-collections-mind.png" alt="Java集合框架功能介绍思维导图"><strong>Java集合框架功能介绍思维导图</strong></p><h3 id="一些概念解释"><a href="#一些概念解释" class="headerlink" title="一些概念解释"></a>一些概念解释</h3><ul><li><strong>跳表</strong>：是一种采用了用空间换时间思想的数据结构。它会随机地将一些节点提升到更高的层次，以创建一种逐层的数据结构，以提高操作的速度。</li><li><strong>阻塞队列和非阻塞的区别</strong>：如果队列里面已经放满了，如果是阻塞队列那么线程会一直阻塞，而非阻塞对垒则会抛出异常。</li></ul><h3 id="一些数据结构的优缺点"><a href="#一些数据结构的优缺点" class="headerlink" title="一些数据结构的优缺点"></a>一些数据结构的优缺点</h3><ul><li><strong>Hash表</strong>：插入、查找最快，为O(1)；如使用链表实现则可实现无锁；数据有序化需要显式的排序操作。</li><li><strong>红黑树</strong>：插入、查找为O(logn)，但常数项较小；无锁实现的复杂性很高，一般需要加锁；数据天然有序。</li><li><strong>SkipList</strong>：插入、查找为O(logn)，但常数项比红黑树要大；底层结构为链表，可无锁实现；数据天然有序。</li></ul><h2 id="一些接口的主要方法梳理"><a href="#一些接口的主要方法梳理" class="headerlink" title="一些接口的主要方法梳理"></a>一些接口的主要方法梳理</h2><h3 id="Collection接口中的抽象方法"><a href="#Collection接口中的抽象方法" class="headerlink" title="Collection接口中的抽象方法"></a>Collection接口中的抽象方法</h3><ul><li><code>int size()</code>，返回集合的大小</li><li><code>boolean isEmpty()</code>，返回集合是否为空的布尔值</li><li><code>boolean contains(Object o)</code>，返回集合是否包含元素<code>o</code>的布尔值</li><li><code>Iterator&lt;E&gt; iterator()</code>，返回该集合中元素的迭代器，继承自<code>Iterable</code>接口</li><li><code>Object[] toArray()</code>，返回一个包含此集合中所有元素的数组</li><li><code>&lt;T&gt; T[] toArray(T[] a)</code>，<code>toArray()</code>方法的泛型版本，返回一个包含此集合中所有元素的数组，返回类型由传入数组参数的类型决定</li><li><code>boolean add(E e)</code>，返回向集合中插入元素<code>e</code>是否成功的布尔值</li><li><code>boolean remove(Object o)</code>，返回从集合中删除元素<code>o</code>是否成功的布尔值</li><li><code>boolean containsAll(Collection&lt;?&gt; c)</code>，返回本集合中是否完全包含集合<code>c</code>的布尔值，即判断集合<code>c</code>是否是本集合子集</li><li><code>boolean addAll(Collection&lt;? extends E&gt; c)</code>，将集合<code>c</code>中的所有元素添加到本集合中并返回</li><li><code>boolean removeAll(Collection&lt;?&gt; c)</code>，移除本集合中所有包含集合<code>c</code>的所有元素</li><li><code>default boolean removeIf(Predicate&lt;? super E&gt; filter)</code>，Java8新增的接口默认方法。将会批量删除符合filter条件的所有元素，该方法需要一个Predicate对象作为作为参数，Predicate也是函数式接口，因此可使用Lambda表达式作为参数。</li><li><code>boolean retainAll(Collection&lt;?&gt; c)</code>，返回本集合和集合<code>c</code>中相同的元素并存到本集合中,集合<code>c</code>保持不变，返回值表示的是本集合是否发生过改变。即该方法是用来求两个集合的交集，交集的结果存到本集合中，如果本集合没发生变化则返回<code>true</code></li><li><code>void clear()</code>，清空本集合中的所有元素</li><li><code>boolean equals(Object o)</code>，返回本集合是否和对象<code>o</code>相等的布尔值</li><li><code>int hashCode()</code>，返回此集合的<code>Hash</code>码值</li><li><code>default Spliterator&lt;E&gt; spliterator()</code>，在集合中创建<code>Spliterator</code>对象<ul><li><code>Spliterator</code>是Java 8引入的新接口，顾名思义，<code>Spliterator</code>可以理解<code>Iterator</code>的<code>Split</code>版本（但用途要丰富很多）。使用<code>Iterator</code>的时候，我们可以顺序地遍历容器中的元素，使用<code>Spliterator</code>的时候，我们可以将元素分割成多份，分别交于不于的线程去遍历，以提高效率。使用<code>Spliterator</code>每次可以处理某个元素集合中的一个元素 — 不是从<code>Spliterator</code>中获取元素，而是使用<code>tryAdvance()</code>或<code>forEachRemaining()</code>方法对元素应用操作。但<code>Spliterator</code>还可以用于估计其中保存的元素数量，而且还可以像细胞分裂一样变为一分为二。这些新增加的能力让流并行处理代码可以很方便地将工作分布到多个可用线程上完成。</li></ul></li><li><code>default Stream&lt;E&gt; stream()</code>，返回一个顺序的<code>Stream</code>对象。Java8引入了Stream以实现对集合更方便地进行函数式编程。</li><li><code>default Stream&lt;E&gt; parallelStream()</code>，返回一个可能并行的<code>Stream</code>对象。Java8新增的方法。流可以是顺序的也可以是并行的。顺序流的操作是在单线程上执行的，而并行流的操作是在多线程上并发执行的。</li></ul><h3 id="List接口中的额外抽象方法"><a href="#List接口中的额外抽象方法" class="headerlink" title="List接口中的额外抽象方法"></a>List接口中的额外抽象方法</h3><ul><li><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code>，将指定集合<code>c</code>中的所有元素插入到指定索引位置处</li><li><code>default void replaceAll(UnaryOperator&lt;E&gt; operator)</code>，Java8新增的使用<code>Lambda</code>的方式，通过应用<code>UnaryOperator</code>获得的结果来替换列表中的每个元素</li><li><code>default void sort(Comparator&lt;? super E&gt; c)</code>，在比较器的基础上将本列表排序</li><li><code>E get(int index)</code>，获取本集合中指定索引位置处的元素</li><li><code>E set(int index, E element)</code>，设置或替换本集合中指定索引位置处的元素</li><li><code>void add(int index, E element)</code>，在本集合中的指定索引位置处插入指定的元素</li><li><code>E remove(int index)</code>，移除本集合中指定索引位置处的元素</li><li><code>int indexOf(Object o)</code>，返回指定元素第一次出现的索引位置</li><li><code>int lastIndexOf(Object o)</code>，返回指定元素最后出现的索引位置</li><li><code>ListIterator&lt;E&gt; listIterator()</code>，返回本集合中的<code>ListIterator</code>迭代器</li><li><code>ListIterator&lt;E&gt; listIterator(int index)</code>，返回本集合中从指定索引位置开始的<code>ListIterator</code>迭代器</li><li><code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code>，返回指定开始和结束索引位置的子集合</li></ul><h3 id="Set接口中的额外抽象方法"><a href="#Set接口中的额外抽象方法" class="headerlink" title="Set接口中的额外抽象方法"></a>Set接口中的额外抽象方法</h3><p>无</p><h3 id="Map接口中的抽象方法"><a href="#Map接口中的抽象方法" class="headerlink" title="Map接口中的抽象方法"></a>Map接口中的抽象方法</h3><ul><li><code>boolean containsKey</code>，判断本Map集合中是否包含指定的key键</li><li><code>boolean containsValue</code>，判断本Map集合中是否包含指定的value值</li><li><code>V get(Object key)</code>，根据key获取本Map集合中的value值</li><li><code>V get(Object key)</code>，向本Map集合中存放key键和value值,返回value值</li><li><code>V remove(Object key)</code>，根据key删除本Map集合中的key和value值，并返回删除的value值</li><li><code>void putAll(Map&lt;? extends K, ? extends V&gt; m)</code>，将指定的Map集合添加到本的Map集合当中</li><li><code>Set&lt;K&gt; keySet()</code>，获取本Map集合中的所有key值，并以Set接口的结果作为返回</li><li><code>Collection&lt;V&gt; values()</code>，获取本Map集合中的所有value值，并以Collection接口的结果作为返回</li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>，获取本Map集合中的所有key和value值，并以<code>Set&lt;Map.Entry&lt;K, V&gt;&gt;</code>的结果作为返回</li><li><code>default V getOrDefault(Object key, V defaultValue)</code>，根据key获取本Map集合中的value值，如果没找到对应的值或者value值是null,则返回<code>defaultValue</code>的值</li><li><code>default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)</code>，Java8新增的使用<code>Lambda</code>的方式遍历操作Map中的元素的默认接口方法</li><li><code>default void replaceAll(BiFunction&lt;? super K, ? super V, ? extends V&gt; function)</code>，Java8新增的使用<code>Lambda</code>的方式遍历替换Map中的元素的默认接口方法</li><li><code>default V putIfAbsent(K key, V value)</code>，Java8新增的不用写是否为null值的检测语句向Map中保存key和value的元素的默认接口方法，即如果通过key获取到的value是空的，则在调用<code>put(key, value)</code>方法并返回value值</li><li><code>default boolean remove(Object key, Object value)</code>，Java8新增的默认接口方法，删除给定key所对应的元素，如果value不存在、为null或者与参数中的value不等，则不能删除。即删除操作需要满足给定的值需要和map中的值相等的条件</li><li><code>default boolean replace(K key, V oldValue, V newValue)</code>，Java8新增的默认接口方法，替换给定key所对应的元素，如果value不存在、为null或者与参数中的oldValue不等，则不能替换。即替换操作需要满足给定的值需要和map中的值相等的条件</li><li><code>default V replace(K key, V value)</code>，Java8新增的默认接口方法，替换给定key所对应的元素，如果value不为null，则value值与参数中的value值做替换。</li><li><code>default V computeIfAbsent(K key, Function&lt;? super K, ? extends V&gt; mappingFunction)</code>，Java8新增的默认接口方法，根据key获取到的value如果不为null，则直接返回value值，否则将<code>Lambda</code>表达式中的结果值存放到Map中</li><li><code>default V computeIfPresent(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)</code>，Java8新增的默认接口方法，根据key获取到的value和新计算的值如果不为null，则直接新计算的值，否则移除该key，且返回null</li><li><code>default V compute(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)</code>，Java8新增的默认接口方法，将<code>Lambda</code>表达式中的结果值存放到Map中，如果计算的新值为null则返回null，且移除以前有的key和value值</li><li><code>default V merge(K key, V value, BiFunction&lt;? super V, ? super V, ? extends V&gt; remappingFunction)</code>，Java8新增的默认接口方法，将新计算的值覆盖Map中原key对应的value值</li></ul><h3 id="SortedSet接口中的额外抽象方法"><a href="#SortedSet接口中的额外抽象方法" class="headerlink" title="SortedSet接口中的额外抽象方法"></a>SortedSet接口中的额外抽象方法</h3><ul><li><code>Comparator&lt;? super E&gt; comparator()</code>，返回本SortedSet集合中的<code>Comparator</code>比较器</li><li><code>SortedSet&lt;E&gt; subSet(E fromElement, E toElement)</code>，获取开始元素和结束元素之间的子SortedSet集合</li><li><code>SortedSet&lt;E&gt; headSet(E toElement)</code>，获取开始元素和<code>toElement</code>元素之间的子SortedSet集合</li><li><code>SortedSet&lt;E&gt; tailSet(E fromElement)</code>，获取<code>fromElement</code>元素和结束元素之间的子SortedSet集合</li><li><code>E first()</code>，获取本SortedSet集合中的第一个元素</li><li><code>E last()</code>，获取本SortedSet集合中的最后一个元素</li></ul><h3 id="SortedMap接口中的额外抽象方法"><a href="#SortedMap接口中的额外抽象方法" class="headerlink" title="SortedMap接口中的额外抽象方法"></a>SortedMap接口中的额外抽象方法</h3><ul><li><code>Comparator&lt;? super K&gt; comparator()</code>，返回本SortedMap集合中的<code>Comparator</code>比较器</li><li><code>SortedMap&lt;K,V&gt; subMap(K fromKey, K toKey)</code>，获取开始key和结束key之间的子SortedMap集合</li><li><code>SortedMap&lt;K,V&gt; headMap(K toKey)</code>，获取开始key和<code>toKey</code>元素之间的子SortedMap集合</li><li><code>SortedMap&lt;K,V&gt; tailMap(K fromKey)</code>，获取<code>fromKey</code>元素和结束key之间的子SortedMap集合</li><li><code>K firstKey()</code>，获取本SortedMap集合中的第一个key</li><li><code>K lastKey()</code>，获取本SortedMap集合中的最后一个key</li><li><code>Set&lt;K&gt; keySet()</code>，获取本SortedMap集合中所有key的Set集合</li><li><code>Collection&lt;V&gt; values()</code>，获取本SortedMap集合中所有value的Collection集合</li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>，获取本SortedMap集合中所有key和value的Map集合</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的进阶使用</title>
      <link href="/2022/04/15/markdown/"/>
      <url>/2022/04/15/markdown/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1-使用-表示标题，其中-号必须在行首，例如："><a href="#1-使用-表示标题，其中-号必须在行首，例如：" class="headerlink" title="1. 使用 # 表示标题，其中 # 号必须在行首，例如："></a>1. 使用 <code>#</code> 表示标题，其中 <code>#</code> 号必须在行首，例如：</h3><pre class="line-numbers language-none"><code class="language-none"># 一号标题## 二号标题### 三号标题#### 四号标题##### 五号标题###### 六号标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-或者-表示，例如："><a href="#2-使用-或者-表示，例如：" class="headerlink" title="2. 使用 === 或者 --- 表示，例如："></a>2. 使用 <code>===</code> 或者 <code>---</code> 表示，例如：</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h4 id="扩展：如何换行？"><a href="#扩展：如何换行？" class="headerlink" title="扩展：如何换行？"></a><strong>扩展：如何换行？</strong></h4><p>一般使用 <strong>两个空格</strong> 加 <strong>回车</strong> 换行，不过一些 IDE 也可以直接使用回车换行。</p><h2 id="二、分割线"><a href="#二、分割线" class="headerlink" title="二、分割线"></a>二、分割线</h2><p>使用三个或以上的 <code>-</code> 或者 <code>*</code>  表示，且这一行只有符号，<strong>注意不要被识别为二级标题即可</strong>，例如中间或者前面可以加空格</p><hr><hr><h2 id="三、斜体和粗体"><a href="#三、斜体和粗体" class="headerlink" title="三、斜体和粗体"></a>三、斜体和粗体</h2><p>使用 <code>*</code> 和 <code>**</code> 分别表示斜体和粗体，例如  </p><p><em>斜体</em><br><strong>粗体</strong><br><em><strong>又斜又粗</strong></em></p><h4 id="扩展：删除线使用两个-表示，例如"><a href="#扩展：删除线使用两个-表示，例如" class="headerlink" title="扩展：删除线使用两个 ~ 表示，例如"></a><strong>扩展：</strong>删除线使用两个 <code>~</code> 表示，例如</h4><p><del>我是要删掉的文字</del></p><hr><h2 id="四、超链接和图片"><a href="#四、超链接和图片" class="headerlink" title="四、超链接和图片"></a>四、超链接和图片</h2><p>超链接和图片的写法类似，图片仅在超链接前多了一个 <code>!</code> ，一般是 [文字描述] (链接)<br>两种写法，分别是： <a href="https://www.baidu.com/">第一种写法</a> 和 <a href="https://www.baidu.com/">第二种写法</a><br>图片的话就比如这样： <img src="https://www.zybuluo.com/static/img/logo.png" alt="Image">  </p><hr><h2 id="五、无序列表"><a href="#五、无序列表" class="headerlink" title="五、无序列表"></a>五、无序列表</h2><p>使用 <code>-</code>、<code>+</code> 和 <code>*</code> 表示无序列表，前后留一行空白，可嵌套，例如</p><ul><li>一层<ul><li>二层</li><li>二层<ul><li>三层<ul><li>四层</li></ul></li></ul></li></ul></li><li>一层</li></ul><hr><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>使用 <code>1. </code> （点号后面有个空格）表示有序列表，可嵌套，例如</p><ol><li>一层<ol><li>二层</li><li>二层</li></ol></li><li>一层</li></ol><hr><h2 id="七、文字引用"><a href="#七、文字引用" class="headerlink" title="七、文字引用"></a>七、文字引用</h2><p>使用 <code>&gt;</code> 表示，可以有多个 <code>&gt;</code>，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层<br>这样是跳不出去的</p><blockquote><p>还可以更深</p></blockquote></blockquote></blockquote><blockquote><p>这样就跳出去了</p></blockquote><hr><h2 id="八、行内代码块"><a href="#八、行内代码块" class="headerlink" title="八、行内代码块"></a>八、行内代码块</h2><p>其实上面已经用过很多次了，即使用 ` 表示，例如</p><p><code>行内代码块</code></p><h3 id="扩展：很多字符是需要转义，使用反斜杠-进行转义"><a href="#扩展：很多字符是需要转义，使用反斜杠-进行转义" class="headerlink" title="扩展：很多字符是需要转义，使用反斜杠 \ 进行转义"></a>扩展：很多字符是需要转义，使用反斜杠 <code>\</code> 进行转义</h3><hr><h2 id="九、代码块"><a href="#九、代码块" class="headerlink" title="九、代码块"></a>九、代码块</h2><p>使用四个空格缩进表示代码块，例如</p><pre><code>public class HelloWorld{    public static void main(String[] args)    {        System.out.println( "Hello, World!" );    }}</code></pre><p>一些 IDE 支持行数提示和着色，一般使用三个 ` 表示，例如</p><pre class="line-numbers language-none"><code class="language-none">public class HelloWorld{    public static void main(String[] args)    {        System.out.println( "Hello, World!" );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><p>直接看例子吧，第二行的 <code>---:</code> 表示了对齐方式，默认<strong>左对齐</strong>，还有<strong>右对齐</strong>和<strong>居中</strong>  </p><table><thead><tr><th>商品</th><th align="right">数量</th><th align="center">单价</th></tr></thead><tbody><tr><td>苹果苹果苹果</td><td align="right">10</td><td align="center">$1</td></tr><tr><td>电脑</td><td align="right">1</td><td align="center">$1999</td></tr></tbody></table><hr><h2 id="十一、数学公式"><a href="#十一、数学公式" class="headerlink" title="十一、数学公式"></a>十一、数学公式</h2><p>使用 <code>$</code> 表示，其中一个 $ 表示在行内，两个 $ 表示独占一行。<br>例如质量守恒公式：$$E=mc^2$$<br>支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="https://www.zybuluo.com/static/img/logo.png">MathJax</a> 参考更多使用方法。</p><p>推荐一个常用的数学公式在线编译网站： <a href="https://www.codecogs.com/latex/eqneditor.php">https://www.codecogs.com/latex/eqneditor.php</a>  </p><hr><h2 id="十二、支持HTML标签"><a href="#十二、支持HTML标签" class="headerlink" title="十二、支持HTML标签"></a>十二、支持HTML标签</h2><h3 id="1-例如想要段落的缩进，可以如下："><a href="#1-例如想要段落的缩进，可以如下：" class="headerlink" title="1. 例如想要段落的缩进，可以如下："></a>1. 例如想要段落的缩进，可以如下：</h3><p>&amp;nbsp;&amp;nbsp;不断行的空白格&amp;nbsp;或&amp;#160;<br>&amp;ensp;&amp;ensp;半方大的空白&amp;ensp;或&amp;#8194;<br>&amp;emsp;&amp;emsp;全方大的空白&amp;emsp;或&amp;#8195;  </p><hr><h2 id="十三、其它"><a href="#十三、其它" class="headerlink" title="十三、其它"></a>十三、其它</h2><ol><li>markdown 各个 IDE 的使用可能存在大同小异，一般可以参考各个 IDE 的介绍文档</li><li>本文档介绍的内容基本适用于大部分的 IDE</li><li>其它一些类似 <strong>流程图</strong> 之类的功能，需要看 IDE 是否支持。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-使用</title>
      <link href="/2022/04/15/git/"/>
      <url>/2022/04/15/git/</url>
      
        <content type="html"><![CDATA[<h2 id="git-flow-的工作流程"><a href="#git-flow-的工作流程" class="headerlink" title="git-flow 的工作流程"></a>git-flow 的工作流程</h2><p>当在团队开发中使用版本控制系统时，商定一个统一的工作流程是至关重要的。Git 的确可以在各个方面做很多事情，然而，如果在你的团队中还没有能形成一个特定有效的工作流程，那么混乱就将是不可避免的。</p><p>基本上你可以定义一个完全适合你自己项目的工作流程，或者使用一个别人定义好的。</p><p>在这章节中我们将一起学习一个当前非常流行的工作流程 git-flow。</p><h2 id="什么是-git-flow？"><a href="#什么是-git-flow？" class="headerlink" title="什么是 git-flow？"></a>什么是 git-flow？</h2><p>一旦安装安装 git-flow，你将会拥有一些扩展命令。这些命令会在一个预定义的顺序下自动执行多个操作。是的，这就是我们的工作流程！</p><p>git-flow 并不是要替代 Git，它仅仅是非常聪明有效地把标准的 Git 命令用脚本组合了起来。</p><p>严格来讲，你并不需要安装什么特别的东西就可以使用 git-flow 工作流程。你只需要了解，哪些工作流程是由哪些单独的任务所组成的，并且附带上正确的参数，以及在一个正确的顺序下简单执行那些对应的 Git 命令就可以了。当然，如果你使用 git-flow 脚本就会更加方便了，你就不需要把这些命令和顺序都记在脑子里。</p><h2 id="安装-git-flow"><a href="#安装-git-flow" class="headerlink" title="安装 git-flow"></a>安装 git-flow</h2><p>近些年来出现了很多不同的安装方法。在本章节中我们会使用当前最流行的一种： <a href="https://github.com/petervanderdoes/gitflow/">AVH Edition</a>。</p><p>要了解安装 git-flow 细节，请阅读下面这个文档 <a href="https://github.com/petervanderdoes/gitflow/wiki#installing-git-flow">official documentation</a>。</p><h2 id="在项目中设置-git-flow"><a href="#在项目中设置-git-flow" class="headerlink" title="在项目中设置 git-flow"></a>在项目中设置 git-flow</h2><p>当你想把你的项目 “切换” 到 git-flow 上后，Git 还是可以像往常一样工作的。这完全是取决于你在仓库上使用特殊的 git-flow 命令或是普通的 Git 命令。换句话说，git-flow 它不会以任何一种戏剧性的方式来改变你的仓库。</p><p>话虽如此，git-flow 却存在一些限制。让我们开始在一个新的项目上初始化它吧，之后我们就会有所发现：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ git flow initInitialized empty Git repository <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token operator">/</span>tobi<span class="token operator">/</span>acme<span class="token operator">-</span>website<span class="token operator">/</span><span class="token punctuation">.</span>git<span class="token operator">/</span>Branch name <span class="token keyword">for</span> production releases<span class="token operator">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span>Branch name <span class="token keyword">for</span> <span class="token string">"next release"</span> <span class="token literal-property property">development</span><span class="token operator">:</span> <span class="token punctuation">[</span>develop<span class="token punctuation">]</span>How to name your supporting branch prefixes<span class="token operator">?</span>Feature branches<span class="token operator">?</span> <span class="token punctuation">[</span>feature<span class="token operator">/</span><span class="token punctuation">]</span>Release branches<span class="token operator">?</span> <span class="token punctuation">[</span>release<span class="token operator">/</span><span class="token punctuation">]</span>Hotfix branches<span class="token operator">?</span> <span class="token punctuation">[</span>hotfix<span class="token operator">/</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当在项目的根目录执行 “git flow init” 命令时（它是否已经包括了一个 Git 仓库并不重要），一个交互式安装助手将引导您完成这个初始化操作。听起来是不是有点炫，但实际上它只是在你的分支上配置了一些命名规则。<br>尽管如此，这个安装助手还是允许你使用自己喜欢的名字。我强烈建议你使用默认的命名机制，并且一步一步地确定下去。</p><h2 id="分支的模式"><a href="#分支的模式" class="headerlink" title="分支的模式"></a>分支的模式</h2><p>git-flow 模式会预设两个主分支在仓库中：</p><ul><li><strong>master</strong> 只能用来包括产品代码。你不能直接工作在这个 master 分支上，而是在其他指定的，独立的特性分支中（这方面我们会马上谈到）。不直接提交改动到 master 分支上也是很多工作流程的一个共同的规则。</li><li><strong>develop</strong> 是你进行任何新的开发的基础分支。当你开始一个新的功能分支时，它将是_开发_的基础。另外，该分支也汇集所有已经完成的功能，并等待被整合到 master 分支中。</li></ul><p><img src="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow/01-master-develop.png" alt="图1"></p><p>这两个分支被称作为<code>长期分支</code>。它们会存活在项目的整个生命周期中。而其他的分支，例如针对功能的分支，针对发行的分支，仅仅只是临时存在的。它们是根据需要来创建的，当它们完成了自己的任务之后就会被删除掉。</p><p><img src="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow/02-features-hotfix.png" alt="图2"></p><h2 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h2><p>对于一个开发人员来说，最平常的工作可能就是功能的开发。这就是为什么 git-flow 定义了很多对于功能开发的工作流程，从而来帮助你有组织地完成它。</p><h2 id="开始新功能"><a href="#开始新功能" class="headerlink" title="开始新功能"></a>开始新功能</h2><p>让我们开始开发一个新功能 “rss-feed”：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ git flow feature start rss<span class="token operator">-</span>feedSwitched to a <span class="token keyword">new</span> <span class="token class-name">branch</span> <span class="token string">'feature/rss-feed'</span>Summary <span class="token keyword">of</span> <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token operator">-</span> <span class="token constant">A</span> <span class="token keyword">new</span> <span class="token class-name">branch</span> <span class="token string">'feature/rss-feed'</span> was created<span class="token punctuation">,</span> based on <span class="token string">'develop'</span><span class="token operator">-</span> You are now on branch <span class="token string">'feature/rss-feed'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这些命令的输出文本中，git-flow 会对刚刚完成的操作打印出一个很有帮助的概述<br>当你需要帮助的时候，你可以随时请求帮助。例如：<br><code>js $ git flow feature help</code></p></blockquote><p>正如上面这个新功能一样，git-flow 会创建一个名为 “feature/rss-feed” 的分支（这个 “feature/” 前缀 是一个可配置的选项设置）。你已经知道了，在你做新功能开发时使用一个独立的分支是版本控制中最重要的规则之一。<br>git-flow 也会直接签出这个新的分支，这样你就可以直接进行工作了。</p><h2 id="完成一个功能"><a href="#完成一个功能" class="headerlink" title="完成一个功能"></a>完成一个功能</h2><p>经过一段时间艰苦地工作和一系列的聪明提交，我们的新功能终于完成了：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">$ git flow feature finish rss<span class="token operator">-</span>feedSwitched to branch <span class="token string">'develop'</span>Updating 6bcf266<span class="token punctuation">.</span><span class="token punctuation">.</span>41748adFast<span class="token operator">-</span>forward    feed<span class="token punctuation">.</span>xml <span class="token operator">|</span> <span class="token number">0</span>    <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token function">deletions</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>    create mode <span class="token number">100644</span> feed<span class="token punctuation">.</span>xmlDeleted branch feature<span class="token operator">/</span>rss<span class="token operator">-</span><span class="token function">feed</span> <span class="token punctuation">(</span>was 41748ad<span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最重要的是，这个 “feature finish” 命令会把我们的工作整合到主 “develop” 分支中去。在这里它需要等待：</p><p>一个在更广泛的 “开发” 背景下的全面测试。<br>稍后和所有积攒在 “develop” 分支中的其它功能一起进行发布。<br>之后，git-flow 也会进行清理操作。它会删除这个当下已经完成的功能分支，并且换到 “develop” 分支。</p><h2 id="管理-releases"><a href="#管理-releases" class="headerlink" title="管理 releases"></a>管理 releases</h2><p>Release 管理是版本控制处理中的另外一个非常重要的话题。让我们来看看如何利用 git-flow 创建和发布 release。</p><h2 id="创建-release"><a href="#创建-release" class="headerlink" title="创建 release"></a>创建 release</h2><p>当你认为现在在 “develop” 分支的代码已经是一个成熟的 release 版本时，这意味着：第一，它包括所有新的功能和必要的修复；第二，它已经被彻底的测试过了。如果上述两点都满足，那就是时候开始生成一个新的 release 了：</p><p>$ git flow release start 1.1.5<br>Switched to a new branch ‘release/1.1.5’<br>请注意，release 分支是使用版本号命名的。这是一个明智的选择，这个命名方案还有一个很好的附带功能，那就是当我们完成了release 后，git-flow 会适当地_自动_去标记那些 release 提交。</p><p>有了一个 release 分支，再完成针对 release 版本号的最后准备工作（如果项目里的某些文件需要记录版本号），并且进行最后的编辑。</p><h2 id="完成-release"><a href="#完成-release" class="headerlink" title="完成 release"></a>完成 release</h2><p>现在是时候按下那个危险的红色按钮来完成我们的release了：</p><p>git flow release finish 1.1.5<br>这个命令会完成如下一系列的操作：</p><ol><li>首先，git-flow 会拉取远程仓库，以确保目前是最新的版本。</li><li>然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。</li><li>为便于识别和做历史参考，release 提交会被标记上这个 release 的名字（在我们的例子里是 “1.1.5”）。</li><li>清理操作，版本分支会被删除，并且回到 “develop”。<br>从 Git 的角度来看，release 版本现在已经完成。依据你的设置，对 “master” 的提交可能已经触发了你所定义的部署流程，或者你可以通过手动部署，来让你的软件产品进入你的用户手中。</li></ol><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>很多时候，仅仅在几个小时或几天之后，当对 release 版本作做全面测试时，可能就会发现一些小错误。<br>在这种情况下，git-flow 提供一个特定的 “hotfix” 工作流程（因为在这里不管使用 “功能” 分支流程，还是 “release” 分支流程都是不恰当的）。</p><h2 id="创建-Hotfixes"><a href="#创建-Hotfixes" class="headerlink" title="创建 Hotfixes"></a>创建 Hotfixes</h2><p>$ git flow hotfix start missing-link<br>这个命令会创建一个名为 “hotfix/missing-link” 的分支。因为这是对产品代码进行修复，所以这个 hotfix 分支是基于 “master” 分支。<br>这也是和 release 分支最明显的区别，release 分支都是基于 “develop” 分支的。因为你不应该在一个还不完全稳定的开发分支上对产品代码进行地修复。</p><p>就像 release 一样，修复这个错误当然也会直接影响到项目的版本号！</p><h2 id="完成-Hotfixes"><a href="#完成-Hotfixes" class="headerlink" title="完成 Hotfixes"></a>完成 Hotfixes</h2><p>在把我们的修复提交到 hotfix 分支之后，就该去完成它了：</p><p>$ git flow hotfix finish missing-link<br>这个过程非常类似于发布一个 release 版本：</p><blockquote><p>完成的改动会被合并到 “master” 中，同样也会合并到 “develop” 分支中，这样就可以确保这个错误不会再次出现在下一个 release 中。<br>这个 hotfix 程序将被标记起来以便于参考。<br>这个 hotfix 分支将被删除，然后切换到 “develop” 分支上去。<br>还是和产生 release 的流程一样，现在需要编译和部署你的产品（如果这些操作不是自动被触发的话）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序软件的设计原则</title>
      <link href="/2022/04/14/cheng-xu-ruan-jian-de-she-ji-yuan-ze/"/>
      <url>/2022/04/14/cheng-xu-ruan-jian-de-she-ji-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>软件也像人一样，具有生命力，从出生到死亡，会经历多种变化。软件架构设计也不是一蹴而就的，是不断地演进发展。每个程序员都可以从理解编程原则和模式中受益。</p><p>软件设计原则是一组帮助我们避开不良设计的指导方针。根据<code>Robert Martin</code>的理论，应该避免不良设计的以下三个重要特点：</p><ul><li><strong>僵化</strong>：很难做改动，因为每一个细微的改动都会影响到系统大量的其他功能</li><li><strong>脆弱</strong>：每当你做一次改动，总会引起系统中预期之外的部分出现故障</li><li><strong>死板</strong>：代码很难在其他应用中重用，因其不能从当前应用中单独抽离出来</li></ul><p>下面这些软件设计原则是我从一些书籍和网络中收集而来，并不完整，而且你也需要在一些有“冲突的原则”之间进行权衡和取舍。本文或许会对你的编程、程序设计、讨论或评审工作有所帮助。</p><h2 id="二、通用设计原则"><a href="#二、通用设计原则" class="headerlink" title="二、通用设计原则"></a>二、通用设计原则</h2><h3 id="1-KISS"><a href="#1-KISS" class="headerlink" title="1. KISS"></a>1. KISS</h3><p>所谓<code>KISS</code>原则，即：<code>Keep It Simple,Stupid</code>，指<strong>设计时要坚持简约原则，避免不必要的复杂化，并且易于修改</strong>。</p><blockquote><p>Everything should be made as simple as possible, but not simpler. - Albert Einstein</p></blockquote><p>简单清晰、功能强大是软件设计最重要的原则和目标。但是软件工程天然错综复杂，而“简单”却没有一个衡量标准，判断和实现一个东西是不是简单，可以通过以下方式来参考。</p><ul><li>让别的软件工程师以一种最容易的方式使用你的方案。</li><li>简单不是走捷径，不是为手边的问题找一个最快的方案。</li><li>当系统变得更庞大更复杂的时候依然能够被理解。</li><li>如果系统无法保持简单，那么我们能做的就是保持各个局部简单，即任何单个的类、模块、应用的设计目标及工作原理都能被快速理解。</li></ul><blockquote><p><strong>我的理解</strong>：保持简单但不能掩盖软件丰富的内涵。即<strong>简约而不简单</strong>！简约是对复杂的事物抽丝剥茧、去除细枝末节显露主要逻辑的过程。就像小时候老师教写文章，要求尽可能用朴实的语言，言简意赅的写出来，但却又要避免语言过于贫乏。软件的“抽象”和它的“直观性”，其实是一对矛盾的关系，软件设计就要保证这两者的平衡。代码抽象过于复杂会陷入“过度设计”不易理解的困境；为了“直观性”缺乏抽象，长此以往又会出现大量的重复、不易于扩展和难维护的困境。</p></blockquote><h3 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h3><p>所谓<code>DRY</code>原则，即：<code>Don't Repeat Yourself</code>，<strong>不要让自己重复</strong>。</p><p><strong>重复代码是软件程序变烂的万恶之首</strong>。<code>DRY</code>并不是指你不能复制代码，而是你复制的代码不能包含重复的“信息”。复制的东西并不仅仅是复制了代码，而是由于你把同一个信息散播在了代码的各个部分导致了有很多相近的代码也散播在各个地方。代码之所以要写的好，不要重复某些“信息”，因为需求人员总是要改需求，不改代码你就要“死”，改代码你就要加班，所以为了减少修改代码的痛苦，我们不能重复任何信息。举个例子，有一天需求人员说，要把分隔符从分号改成顿号！一下子就要改多个地方了。</p><p>所以，<strong>去掉重复的信息会让你的代码结构发生本质的变化</strong>。</p><p>“重复代码”有很多变体：</p><ul><li>魔法数字、魔法字符串等</li><li>相同代码块</li><li>相似的代码逻辑及操作</li></ul><p>对于消除重复的代码有<strong>事不过三</strong>法则。</p><ul><li>第一次先写了一段代码。</li><li>第二次在另一个地方写了一段相同或相似逻辑的代码，你已经有消除和提取重复代码的冲动了。</li><li>再次在另一个地方写了同样的代码，你已忍无可忍，现在可以考虑抽取和消除重复代码了。</li></ul><blockquote><p><strong>我的理解</strong>：解决重复的最佳的方式是通过培养良好的编码习惯来避免重复，通过重构的手段来消除重复。发现和解决重复并不困难，通过提取抽象、提取方法等措施就能消除重复，但困难的是<strong>立即行动</strong>去解决重复，从而不断的磨砺和提升自己的编程技艺，不断将私人代码变成公共代码，这才是自我提升的过程。解决了重复，经过一段时间，你就会发现，你对整个系统的理解程度在不知不觉中提高了不少。</p></blockquote><h3 id="3-Maximize-Cohesion，-Minimize-Coupling"><a href="#3-Maximize-Cohesion，-Minimize-Coupling" class="headerlink" title="3. Maximize Cohesion， Minimize Coupling"></a>3. Maximize Cohesion， Minimize Coupling</h3><p>所谓<code>Maximize Cohesion,Minimize Coupling</code>原则，即：<strong>高内聚低耦合</strong>。这是判断设计好坏的标准，主要是看<strong>模块内的内聚性是否高，模块间的耦合度是否低。</strong></p><ul><li><strong>耦合性</strong>：也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</li><li><strong>内聚性</strong>：又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。</li></ul><p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><p>Java中实现高内聚低耦合的常用方式：</p><ul><li>少使用类的继承，多用接口隐藏实现的细节。</li><li>模块的功能化分尽可能的单一，道理也很简单，功能单一的模块供其它模块调用的机会就少。</li><li>遵循一个定义只在一个地方出现。</li><li>少使用全局变量。</li><li>类属性和方法的声明少用<code>public</code>，多用<code>private</code>关键字，</li><li>多用设计模式，比如采用<code>MVC</code>的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>尽量不用“硬编码”的方式写程序。</li><li>最后当然就是避免直接操作或调用其它模块或类（内容耦合）。</li></ul><h3 id="4-SOC"><a href="#4-SOC" class="headerlink" title="4. SOC"></a>4. SOC</h3><p>所谓<code>SOC</code>原则，即：<strong>关注点分离</strong>（<code>Separation of Concerns</code>）。<strong>不同领域的功能，应该由不同的代码和最小重迭的模块组成。</strong>关注点分离是处理复杂性的一个原则。由于关注点混杂在一起会导致软件程序复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。关注点分离原则不仅体现在软件程序设计等设计方法中，同时也体现在架构设计、问题求解、软件开发过程、软件项目管理以及软件开发方法学等诸多方面。</p><p><code>MVC</code>就是关注点分离的一个体现，把业务逻辑、数据、界面分离，这也是组织代码结构的一个形式。<code>MVC</code>的基本结构：</p><ul><li><code>Model</code>层表示应用程序的数据核心，通常负责在数据库中存取数据。</li><li><code>View</code>是应用程序的显示层，通常是依据模型的数据而建立。</li><li><code>Controller</code>是用来控制和处理输入输出的，是处理用户交互的部分，也负责向模型（<code>Model</code>层）发送数据。</li></ul><p><code>MVC</code>的这个设计各个关注点是分开的，这样有助于我们管理和开发复杂的应用程序，我们可以在某个时间点只集中精力在其中的某一个关注点，而不是所有的部分。</p><blockquote><p>好的架构必须使每个关注点相互分离，也就是说系统中的一个部分发生了变化，不会影响其他部分。即使需要改变，也能够清晰地识别出那些部分需要改变。如果需要扩展架构，影响将会最小化，已经可以工作的每个部分都将继续工作。——Ivar Jacobson(《AOSD中文版》)</p></blockquote><h4 id="分离方式"><a href="#分离方式" class="headerlink" title="分离方式"></a>分离方式</h4><p>下面将介绍一些分层的思想和方式:</p><ul><li><strong>纵向分离</strong>: 如常见的三层架构（逻辑控制层、业务处理层和数据持久化层）。</li><li><strong>横向分离</strong>: 如把我们的软件拆分成模块或子系统。从左到右是模块1、模块2、模块3，这是一种水平方向的切割。这跟纵向的分离是两个不同的方向，横向分离大多是模块化的过程。</li><li><strong>切面分离</strong>: 有些内容是多个层之间都需要的，比如日志（<code>log</code>），在你的系统里面，界面层、逻辑层、数据访问层可能都需要写日志，这种跨到多层同样逻辑就可以考虑切面分离。</li><li><strong>依赖方向分离</strong>: 按依赖方向考虑，决定某个类应该放在哪个层次里面，或者考虑将某一层切割成多层。</li><li><strong>关注数据分离</strong>: 在组织数据时，应该尽量考虑数据本身的固有属性，如果不是它们的固有属性，那么应该分离出来。比如产品的类就不应该关联<code>customer</code>类，应该是用订单类来把他们联系在一起。</li><li><strong>关注行为分离</strong>: 行为也应该是事物或对象的固有的本身的行为，明显偏离原来行为的，应该考虑成另外的关注点儿分离开。比如有一个函数叫做<code>CreateNewCustomer()</code>，那么<code>CreateNewCustomer()</code>的行为就应该限定在创建一个新客户上面，给新客户自动发优惠券的动作就不能放到这个函数里面。</li><li><strong>扩展分离</strong>: 如果基于某种设计，原先不具有某些行为需要增加，可以考虑通过扩展或插件的形式来完成，将这些功能放入到插件或扩展中。</li><li><strong>反转分离</strong>: 很多依赖注入的框架，如<code>Spring</code>、<code>Guice</code>等等，这些帮助我们做依赖反转，从而倒置依赖关系。</li></ul><h3 id="5-YAGNI"><a href="#5-YAGNI" class="headerlink" title="5. YAGNI"></a>5. YAGNI</h3><p>所谓<code>YAGNI</code>原则，即：<code>You Ain’t Gonna Need It</code>，<strong>你不需要它</strong>。它是一种极限编程（XP）实践，表示程序员不应为目前还不需要的功能编写代码。<code>YAGNI</code>很像<code>KISS</code>原则，因为它也是致力于构建简单的方案。然而，<code>KISS</code>是通过尽可能容易的完成某件事情来实现精简方案；但<code>YAGNI</code>是通过根本就不实现它来达到精简。<code>YAGNI</code>的观点是你应该<strong>为了眼前的需求做设计而不是未来</strong>。</p><blockquote><p>只在真正需要某些功能的时候才去实现它，而不是仅仅因为你预见到它将出现。- XP的联合创始人Ron Jeffries</p></blockquote><p>即使你非常确信将来你需要某个特性，也不要现在就去实现它。在很多情况下，你会发现或许最终你不需要它了，或者是你真正所需的特性与你之前预计的有很大的出入。遵循 YAGNI 实践有两个主要原因：</p><ul><li>你节约了时间，因为你避免了编写最终证明不必要的代码。</li><li>你的代码质量更高了，因为你使代码不必为你的“推测”所污染，而这些“推测”最终可能或多或少有些错误，但此时这些错误已牢牢地依附在你的代码中了。</li></ul><blockquote><p><strong>我的理解</strong>：YAGNI 原则，本质上是告诫我们<strong>写代码不要画蛇添足，否则就会弄巧成拙了</strong>。编写业务代码时，不要去假想一些需求或者场景，因为大多数你所设想的场景都不会发生，而你所多写的那些代码也将会长期滞留在你的系统中，收效甚微，但却让你和团队花费了更多的时间和精力去书写和维护，更可怕的是可能会对将来新的代码维护人造成困惑。另外对于没有被使用到的代码，我认为也都应该立即删除，从而保持系统的精简，如果将来需要时再去书写或恢复，而且那时侯写出的代码也绝对比之前的更为契合。</p></blockquote><h3 id="6-Boy-Scout-Rule"><a href="#6-Boy-Scout-Rule" class="headerlink" title="6. Boy-Scout Rule"></a>6. Boy-Scout Rule</h3><p><code>Boy-Scout Rule</code>，译为：<strong>童子军规则</strong>。美国童子军有一个简单的规则：“让营地比你刚来时更干净(<code>Always leave the campground cleaner than you found it</code>)”。如果看到地上有垃圾，不管是谁扔的，都要清理。这样你就有意地为下一批来宿营的人改善了环境。</p><p>童子军规则告诉我们在对现有代码库进行更改时，代码质量往往会降低，从而积累技术债务。所以需要<strong>始终保持代码整洁</strong>。不管原作者是谁，如果我们努力去改进代码模块，不管是多么小的改进，我们的软件系统就再也不会持续变坏了。取而代之的是，系统在发展的同时会逐渐变得更好。我们也会看到团队们关心整体的系统，而不是各自只关心自己负责的一小部分。而且团队成员要互助，互相清理代码，他们遵从童子军规则，因为那对每个人都很好，而不仅仅是对自己好。</p><p>关于童子军规则中所提倡的<strong>对代码坏味道的尽早修复</strong>，我也想起来了我们所熟知的“<strong>破窗效应</strong>”和“<strong>讳疾忌医</strong>”的典故：</p><h4 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h4><blockquote><p>如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些示范性的纵容去打烂更多的窗户。久而久之，这些破窗户就给人造成一种无序的感觉，结果在这种公众麻木不仁的氛围中，犯罪就会滋生、猖獗。——政治学家威尔逊和犯罪学家凯琳提出的“破窗效应”理论</p></blockquote><ul><li>“环境早就脏了，我扔的这点儿垃圾根本起不到关键性作用。”</li><li>“这个代码以前的其他人也都是这样写的。”</li><li>“反正也不是只有我才这么写代码的。”</li></ul><p>不少人会像上面这样辩解自己的过错。其实，这些说法根本站不住脚，错了就是错了，影响的大小并不能改变行为错误的本质，别人的错误更不会是证明你无错的理由。任何一种不良现象的存在，都有可能传递一种错误信息。进而导致更坏的后果，正所谓“<strong>千里之堤，溃于蚁穴</strong>”、<strong>勿以善小而不为，勿以恶小而为之</strong>。</p><h4 id="讳疾忌医的典故"><a href="#讳疾忌医的典故" class="headerlink" title="讳疾忌医的典故"></a>讳疾忌医的典故</h4><p><img src="https://statics.sh1a.qingstor.com/2018/11/24/hjjy.jpeg" alt="扁鹊三连"><strong>扁鹊三连</strong></p><p>《扁鹊见蔡桓公》的故事，我们从小就学习了，告诉我们不能盲目相信自己，不能讳疾忌医。但想想我们自己代码的坏味道和bug，也是如出一辙。</p><p>代码坏味道或者糟糕的程序代码就像隐形的“疾病”一样潜伏在项目中，也因此形成了技术债务。如果这些“疾病”在项目初期不引起注关注、不把疾病扼杀在萌芽之中，那么后期修复它的代价也就越大，也必然会使得项目的软件程序越来越难以维护，这个项目也最终会像蔡桓公一样无药可治、“无奈何也”。</p><blockquote><p>所以，请记住童子军规则对我们的启示：<strong>始终保持代码整洁，勿以善小而不为，勿以恶小而为之，有病早治</strong>。</p></blockquote><h3 id="其他原则："><a href="#其他原则：" class="headerlink" title="其他原则："></a>其他原则：</h3><ul><li><strong>避免过早优化</strong>（<code>Avoid Premature Optimization</code>）: 除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。“<strong>过早的优化是一切罪恶之源</strong>。”——Donald Knuth</li><li><strong>最小惊讶原则</strong>(<code>Principle of least astonishment</code>): 代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。</li><li><strong>代码重用原则</strong>（<code>Code Reuse is Good</code>）: 重用代码能提高代码的可读性，缩短开发时间。</li><li><strong>别让我思考</strong>(<code>Don’t Make Me Think</code>): 所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。</li><li><strong>为维护者写代码</strong>(<code>Write Code for the Maintainer</code>): 优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。“如果一个维护者不再继续维护你的代码，很可能他就有了想杀你的冲动。”</li><li><strong>正交原则(Orthogonality)</strong>: 正交性的基本思想是，在概念上不相关的事物不应该与系统相关。设计越正交，异常越少。 这使得用编程语言更容易学习，读写程序。(反例：<code>CSS</code>)。</li><li><strong>做最简单的事儿就让代码可运行</strong>（<code>Do the simplest thing that could possibly work</code>）: 尽可能做最简单的事就可以让代码可运行。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。</li><li><strong>隐藏实现细节</strong>（<code>Hide Implementation Details</code>）: 软件模块通过提供接口隐藏信息（即实现细节），而不泄漏任何不必要的信息。</li><li><strong>科里定律</strong>(<code>Curly's Law</code>): 是为任何特定的代码选择一个明确定义的目标：<strong>只做一件事</strong>。</li><li><strong>墨菲定律</strong>（<code>Murphy's Law</code>）:根本内容是：<strong>如果事情有变坏的可能，不管这种可能性有多小，它总会发生</strong>。主要内容如下：<ul><li>任何事都没有表面看起来那么简单；</li><li>所有的事都会比你预计的时间长；</li><li>会出错的事总会出错；</li><li>如果你担心某种情况发生，那么它就更有可能发生。</li></ul></li></ul><h2 id="三、面向对象设计原则"><a href="#三、面向对象设计原则" class="headerlink" title="三、面向对象设计原则"></a>三、面向对象设计原则</h2><h3 id="1-SRP"><a href="#1-SRP" class="headerlink" title="1. SRP"></a>1. SRP</h3><p>所谓<code>SRP</code>原则，即：<code>Single Responsibility Principle</code>，<strong>单一职责原则</strong>。原始定义如下：</p><blockquote><p>There should never be more than one reason for a class to change.(<strong>只有一个引起类改变的原因</strong>)</p></blockquote><p>在面向对象编程领域中，单一职责原则（<code>Single responsibility principle</code>）规定每个类都应该有一个单一的职责或者叫功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）。一个类或者模块应该有且只有一个改变的原因。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起了。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。而如果想要避免这种现象的发生，就要尽可能的遵守单一职责原则。此原则的核心就是<strong>解耦</strong>和<strong>增强内聚性</strong>。</p><h4 id="单一职责的好处："><a href="#单一职责的好处：" class="headerlink" title="单一职责的好处："></a>单一职责的好处：</h4><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义;</li><li>可读性提高，复杂性降低，可维护性提高;</li><li>变更引起的风险降低。</li></ul><h4 id="单一职责原则的注意点："><a href="#单一职责原则的注意点：" class="headerlink" title="单一职责原则的注意点："></a>单一职责原则的注意点：</h4><ul><li>单一职责最难划分的是<strong>职责</strong>。</li><li>单一职责原则提出标准：用职责和变化原因来衡量接口或类设计的是否优良，但是职责和变化原因都是不可度量的，因项目、环境而异。</li><li>接口一定要做到单一职责，类的设计尽量做到只有一个原因引起它变化。</li></ul><h3 id="2-LSP"><a href="#2-LSP" class="headerlink" title="2. LSP"></a>2. LSP</h3><p>所谓<code>LSP</code>原则，即：<code>Liskov Substitution principle</code>，<strong>里氏替换原则</strong>。原始定义如下：</p><blockquote><p>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it.（<strong>所有引用基类的地方必须能透明地使用其子类的对象</strong>）</p></blockquote><p>更通俗的定义即为：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能</strong>。里氏替换原则包含了一下4层含义：</p><ul><li>子类必须完全实现父类的方法。在类中调用其他类是务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了<code>LSP</code>原则。</li><li>子类可以有自己的个性。子类当然可以有自己的行为和外观了，也就是方法和属性。</li><li>覆盖或实现父类的方法时输入参数可以被放大。即子类可以覆盖父类的方法，但输入参数应比父类方法中的大，这样在子类代替父类的时候，调用的仍然是父类的方法。即以子类中方法的前置条件必须与超类中被覆盖的方法的前置条件相同或者更宽松。</li><li>覆盖或实现父类的方法时输出结果可以被缩小。</li></ul><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>提高代码的重用性，子类拥有父类的方法和属性；</li><li>提高代码的可扩展性，子类可形似于父类，但异于父类，保留自我的特性；</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>继承是侵入性的，只要继承就必须拥有父类的所有方法和属性，在一定程度上约束了子类，降低了代码的灵活性；</li><li>增加了耦合，当父类的常量、变量或者方法被修改了，需要考虑子类的修改，所以一旦父类有了变动，很可能会造成非常糟糕的结果，要重构大量的代码。</li></ul><h3 id="3-ISP"><a href="#3-ISP" class="headerlink" title="3. ISP"></a>3. ISP</h3><p>所谓<code>ISP</code>原则，即：<code>Interface&nbsp;Segregation&nbsp;Principle</code>，<strong>接口隔离原则</strong>。原始定义如下：</p><blockquote><p>Clients should not be forced to depend upon interfaces that they do not use.(客户端只依赖于它所需要的接口；它需要什么接口就提供什么接口，把不需要的接口剔除掉。)</p></blockquote><blockquote><p>The dependency of one class to another one should depend on the smallest possible interface.(类间的依赖关系应建立在最小的接口上。)</p></blockquote><p>即，<strong>接口尽量细化，接口中的方法尽量少</strong>。接口隔离原则与单一职责原则的审视角度是不同的，单一职责原则要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。根据接口隔离原则拆分接口时，首先必须满足单一职责原则。</p><p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p><ul><li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li><li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ul><p>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p><h3 id="4-OCP"><a href="#4-OCP" class="headerlink" title="4. OCP"></a>4. OCP</h3><p>所谓<code>OCP</code>原则，即：<code>Open Closed Principle</code>，<strong>开闭原则</strong>。原始定义如下：</p><blockquote><p>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.(对扩展开放，对修改关闭)</p></blockquote><p>开闭原则（<code>OCP</code>）是面向对象设计中“可复用设计”的基石，是面向对象设计中最重要的原则之一，其它很多的设计原则和设计模式都是实现开闭原则的一种手段。核心就是：<strong>对扩展开放，对修改关闭</strong>。其含义是说一个软件应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化的。</p><p>软件系统中包含的各种组件，例如模块（<code>Module</code>）、类（<code>Class</code>）以及功能（<code>Function</code>）等等，应该在不修改现有代码的基础上，引入新功能。开闭原则中“开”，是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的；开闭原则中“闭”，是指对于原有代码的修改是封闭的。</p><p>实现开闭原则的关键就在于“<strong>抽象</strong>”。把系统的所有可能的行为抽象成一个抽象底层，这个抽象底层规定出所有的具体实现必须提供的方法的特征。作为系统设计的抽象层，要预见所有可能的扩展，从而使得在任何扩展情况下，系统的抽象底层不需修改；同时，由于可以从抽象底层导出一个或多个新的具体实现，可以改变系统的行为，因此系统设计对扩展是开放的。在实际开发过程的设计开始阶段，就要罗列出来系统所有可能的行为，并把这些行为加入到抽象底层，根本就是不可能的，这么去做也是不经济的。因此我们应该现实的接受修改拥抱变化，使我们的代码可以对扩展开放，对修改关闭。</p><p>开闭原则的好处：</p><ul><li>可复用性好;</li><li>可维护性好。</li></ul><h3 id="5-DIP"><a href="#5-DIP" class="headerlink" title="5. DIP"></a>5. DIP</h3><p>所谓<code>DIP</code>原则，即：<code>Dependency Inversion Principle</code>，<strong>依赖倒置原则</strong>。原始定义如下：</p><blockquote><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.(<strong>高层模块不应该依赖低层模块，两者都应该依赖其抽象</strong>)</p></blockquote><blockquote><p>Abstractions should not depend on details. Details should depend on abstractions.(<strong>抽象不应该依赖细节；细节应该依赖抽象</strong>)</p></blockquote><p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><p>依赖倒置原则主要有以下三层含义：</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象（抽象类或接口）；</li><li>抽象不应该依赖细节（具体实现）；</li><li>细节（具体实现）应该依赖抽象。</li></ul><p>依赖倒置原则基于这样一个事实：<strong>相对于细节的多变性，抽象的东西要稳定的多</strong>。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在 Java 中，抽象指的是接口或者抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。<strong>依赖倒置原则的核心思想就是面向接口编程</strong>。</p><h3 id="6-LOD-LKP"><a href="#6-LOD-LKP" class="headerlink" title="6. LOD | LKP"></a>6. LOD | LKP</h3><p>所谓<code>LOD</code>原则，即：<code>Law of Demeter</code>，<strong>迪米特法则</strong>，又叫<strong>最少知识原则</strong>（<code>Least Knowledge Principle</code>，简写<code>LKP</code>），就是说一个对象应当对其他对象有尽可能少的了解。通俗的讲，一个类应该对自己需要耦合或调用的类知道得最少，被耦合的类是如何的复杂都和我没关系，即为“不和陌生人说话”。迪米特法则的英文解释如下：</p><blockquote><p>talk only to your immediate friends.(<strong>只与直接的朋友通信</strong>)</p></blockquote><p><strong>迪米特法则的初衷在于降低类之间的耦合</strong>。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p><p>迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的“朋友”类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系——这在一定程度上增加了系统的复杂度,同时也为系统的维护带来了难度。所以，在采用迪米特法则时需要反复权衡，不遵循不对，严格执行又会“过犹不及”。既要做到让结构清晰，又要做到高内聚低耦合。</p><h3 id="7-CRP"><a href="#7-CRP" class="headerlink" title="7. CRP"></a>7. CRP</h3><p>所谓<code>CRP</code>原则，即：<code>Composite&nbsp;Reuse&nbsp;Principle</code>，<strong>组合复用原则</strong>。</p><p>组合复用原则的核心思想是：<strong>尽量使用对象组合，而不是继承来达到复用的目的</strong>。该原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分：新的对象通过向这些对象的委派达到复用已有功能的目的。</p><p>继承的缺点主要有以下几点：</p><ul><li>继承复用破坏数据封装性，将基类的实现细节全部暴露给了派生类，基类的内部细节常常对派生类是透明的，白箱复用。虽然简单，但不安全，不能在程序的运行过程中随便改变。</li><li>基类的实现发生了改变，派生类的实现也不得不改变。</li><li>从基类继承而来的派生类是静态的，不可能在运行时间内发生改变，因此没有足够的灵活性。</li></ul><p>由于组合可以将已有的对象纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做有下面的好处：</p><ul><li>新对象存取<code>组成对象</code>的唯一方法是通过<code>组成对象</code>的<code>getter/setter</code>方法。</li><li>组合复用是黑箱复用，因为组成对象的内部细节是新对象所看不见的。</li><li>组合复用所需要的依赖较少。</li><li>每一个新的类可以将焦点集中到一个任务上。</li><li>组合复用可以在运行时间动态进行，新对象可以动态的引用与成分对象类型相同的对象。</li></ul><p>组合复用的缺点：就是用组合复用建造的系统会有较多的对象需要管理。</p><p>组合复用原则可以使系统更加灵活，类与类之间的耦合度降低，一个类的变化对其他类造成的影响相对较少，因此一般首选使用组合来实现复用；其次才考虑继承。在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p><p>使用继承时必须满足<code>Is-A</code>的关系是才能使用继承，而组合却是一种<code>Has-A</code>的关系。导致错误的使用继承而不是使用组合的一个重要原因可能就是错误的把<code>Has-A</code>当成了<code>Is-A</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 软件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象编程 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8特性详解</title>
      <link href="/2022/04/14/java8-te-xing/"/>
      <url>/2022/04/14/java8-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="♥Java8特性知识体系详解♥"><a href="#♥Java8特性知识体系详解♥" class="headerlink" title="♥Java8特性知识体系详解♥"></a>♥Java8特性知识体系详解♥</h1><blockquote><p>Java 8 新特性详解汇总。@pdai</p><ul><li>Java 新特性的增加都是来源于 JSR或者JEP</li><li>JSR论坛:  <a href="https://jcp.org/en/jsr/detail?id=335">https://jcp.org/en/jsr/detail?id=335</a></li></ul></blockquote><ul><li><a href="#java8%E7%89%B9%E6%80%A7%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3">♥Java8特性知识体系详解♥</a></li><li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">相关文章</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B">函数编程</a></li><li><a href="#optional%E7%B1%BB">Optional类</a></li><li><a href="#default%E6%96%B9%E6%B3%95">default方法</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">类型注解</a></li><li><a href="#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">重复注解</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD">类型推断</a></li><li><a href="#jre-%E7%B2%BE%E7%AE%80">JRE 精简</a></li><li><a href="#localdatelocaldatetime">LocalDate/LocalDateTime</a></li><li><a href="#javafx">JavaFX</a></li><li><a href="#permgen%E7%A7%BB%E9%99%A4">PermGen移除</a></li><li><a href="#stampedlock">StampedLock</a></li><li><a href="#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0">其它更新</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li></ul><h2 id="¶-知识体系"><a href="#¶-知识体系" class="headerlink" title="¶ 知识体系"></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">¶</a> 知识体系</h2><p><strong>MetaSpace代替Perm Gen</strong></p><p>元空间代替了永久代,所以JVM关于永久代的参数也都作废了，取而代之的是关于MetaSpace空间的参数。而且MetaSpace是属于直接内存而不是JVM分配的内存。</p><p>为什么要在直接内存里拿出来一块内存作为元空间取代永久代呢？主要的说法有以下几个：</p><p>（1）类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</p><p>（2）永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。</p><p>即方便分配管理，因为直接内存空间比较充足；便于回收，因为永久代本来回收垃圾的事件发生概率很低，直接从JVM中拿出可以提高回收效率。</p><p><strong>方法区与永久代的关系</strong></p><p>很多文章里喜欢把方法区等同与永久代，永久代既然没了，方法区也就没了。但我认为方法区只是一种逻辑上的概念，永久代指物理上的堆内存的一块空间，这块实际的空间完成了方法区存储字节码、静态变量、常量的功能等等。既然如此，现在元空间也可以认为是新的方法区的实现了。</p><p><strong>常量池随永久代的变化</strong></p><p>几种常量池：</p><p>（1）静态常量池：即*.class文件中的常量池，在Class文件结构中，最头的4个字节存储魔数，用于确定一个文件是否能被JVM接受，接着4个字节用于存储版本号，前2个为次版本号，后2个主版本号，再接着是用于存放常量的常量池，由于常量的数量是不固定的，所以常量池的入口放置一个U2类型的数据(constant_pool_count)存储常量池容量计数值。</p><p>这种常量池占用class文件绝大部分空间，主要用于存放两大类常量：字面量和符号引用量，字面量相当于Java语言层面常量的概念，如文本字符串、基础数据、声明为final的常值等；符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：类和接口的全限定名、字段名称描述符、方法名称描述符。类的加载过程中的链接部分的解析步骤就是把符号引用替换为直接引用，即把那些描述符（名字）替换为能直接定位到字段、方法的引用或句柄（地址）。</p><p>（2）运行时常量池：虚拟机会将各个class文件中的常量池载入到运行时常量池中，即编译期间生成的字面量、符号引用，总之就是装载class文件。为什么它叫运行时常量池呢？因为这个常量池在运行时，里面的常量是可以增加的。如：“+”连接字符生成新字符后调用 intern（）方法、生成基础数据的包装类型等等。</p><p>（3）字符串常量池 ：字符串常量池可以理解为是分担了部分运行时常量池的工作。加载时，对于class文件的静态常量池，如果是字符串就会被装到字符串常量池中。</p><p>（4）整型常量池：Integer，类似字符串常量池。管理-128–127的常量。类似的还有Character、Long等常量池（基本数据类型没有，Double、Float也没有常量池）</p><p>总结就是：</p><p>class文件有常量池存放这个类的信息，占用了大多数空间。但是运行时所有加载进来的class文件的常量池的东西都要放到运行时常量池，这个运行时常量池还可以在运行时添加常量。字符串常量池、Integer等常量池则是分担了运行时常量池的工作，</p><p><strong>在永久代移除后，字符串常量池也不再放在永久代了，但是也没有放到新的方法区—元空间里，而是留在了堆里（为了方便回收？）。运行时常量池当然是随着搬家到了元空间里，毕竟它是装类的重要信息的，有它的地方才称得上是方法区。</strong></p><h3 id="¶-函数编程"><a href="#¶-函数编程" class="headerlink" title="¶ 函数编程"></a><a href="#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B">¶</a> 函数编程</h3><blockquote><p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p></blockquote><ul><li>Lambda 表达式的特点</li><li>Lambda 表达式使用和Stream下的接口</li><li>函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.</li><li>Comparator排序为例贯穿所有知识点。</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-stream.html">Java 8 - 函数编程</a></p><h3 id="¶-Optional类"><a href="#¶-Optional类" class="headerlink" title="¶ Optional类"></a><a href="#optional%E7%B1%BB">¶</a> Optional类</h3><blockquote><p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p></blockquote><ul><li>Optional类的意义</li><li>Optional类有哪些常用的方法</li><li>Optional举例贯穿所有知识点</li><li>多重类嵌套Null值判断</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-optional.html">Java 8 - Optional类</a></p><h3 id="¶-default方法"><a href="#¶-default方法" class="headerlink" title="¶ default方法"></a><a href="#default%E6%96%B9%E6%B3%95">¶</a> default方法</h3><blockquote><p>默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java 8的lambdas表达式时，提供给我们一个平滑的过渡体验。</p></blockquote><ul><li>为什么会出现默认方法?</li><li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li><li>多重实现的默认方法冲突怎么办?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-default.html">Java 8 - default方法</a></p><h3 id="¶-类型注解"><a href="#¶-类型注解" class="headerlink" title="¶ 类型注解"></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">¶</a> 类型注解</h3><blockquote><p>那充满争议的类型注解究竟是什么? 复杂还是便捷?</p></blockquote><ul><li>注解在JDK哪个版本中出现的，可以在哪些地方用注解?</li><li>什么是类型注解?</li><li>类型注解的作用是什么?</li><li>为什么会出现类型注解(JSR308)?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-type-anno.html">Java 8 - 类型注解</a></p><h3 id="¶-重复注解"><a href="#¶-重复注解" class="headerlink" title="¶ 重复注解"></a><a href="#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">¶</a> 重复注解</h3><ul><li>Java8之前对重复注解是怎么做的?</li><li>Java8对重复注解添加了什么支持?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-anno-repeat.html">Java 8 - 重复注解</a></p><h3 id="¶-类型推断"><a href="#¶-类型推断" class="headerlink" title="¶ 类型推断"></a><a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD">¶</a> 类型推断</h3><blockquote><p>导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。</p></blockquote><ul><li>什么是泛型?</li><li>Java7对泛型推断做了哪些优化?</li><li>Java8对此有做了哪些优化?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-type.html">Java 8 - 类型推断优化</a></p><h3 id="¶-JRE-精简"><a href="#¶-JRE-精简" class="headerlink" title="¶ JRE 精简"></a><a href="#jre-%E7%B2%BE%E7%AE%80">¶</a> JRE 精简</h3><blockquote><p>模块化特性是javaer所期待的特性, 一个占用资源少的JRE运行环境，紧凑的JRE特性的出现，能带来以后的物联网的发展，甚至还是会有大量的java应用程序出现在物联网上面。</p></blockquote><ul><li>为什么精简Java8 JRE，及好处是啥?</li><li>紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是?</li><li>在不同平台上如何编译等?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-jre.html">Java 8 - JRE精简</a></p><h3 id="¶-LocalDate-x2F-LocalDateTime"><a href="#¶-LocalDate-x2F-LocalDateTime" class="headerlink" title="¶ LocalDate/LocalDateTime"></a><a href="#localdatelocaldatetime">¶</a> LocalDate/LocalDateTime</h3><blockquote><p>Date/Calendar槽点, java8对其进行了重写。</p></blockquote><ul><li>Java8之前的Date有哪些槽点? (Calendar的所有属性都是可变的，SimpleDateFormat的线程不安全性等)</li><li>Java8之前使用哪些常用的第三方时间库?</li><li>Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?</li><li>其它语言时间库?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-localdatetime.html">Java 8 - LocalDate/LocalDateTime</a></p><h3 id="¶-JavaFX"><a href="#¶-JavaFX" class="headerlink" title="¶ JavaFX"></a><a href="#javafx">¶</a> JavaFX</h3><blockquote><p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。</p></blockquote><ul><li>javaFX发展历程?</li><li>Java8对其增加了哪些特性?</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-javafx.html">Java 8 - JavaFX</a></p><h3 id="¶-PermGen移除"><a href="#¶-PermGen移除" class="headerlink" title="¶ PermGen移除"></a><a href="#permgen%E7%A7%BB%E9%99%A4">¶</a> PermGen移除</h3><blockquote><p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域。PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p></blockquote><ul><li>Java8之前 “java.lang.OutOfMemoryError: PermGen space”是怎么引起的，怎么解决的?</li><li>新增加的元空间(Metaspace)包含哪些东西，画出图</li><li>元空间(Metaspace)和PermGen对比</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-permgen.html">Java 8 - 移除Permgen</a></p><h3 id="¶-StampedLock"><a href="#¶-StampedLock" class="headerlink" title="¶ StampedLock"></a><a href="#stampedlock">¶</a> StampedLock</h3><ul><li>为什么会引入StampedLock</li><li>用Lock写悲观锁和乐观锁举例</li><li>用StampedLock写悲观锁和乐观锁举例</li><li>性能对比</li></ul><p>详细分析请参看: <a href="/md/java/java8/java8-stampedlock.html">Java 8 - StampedLock</a></p><h3 id="¶-其它更新"><a href="#¶-其它更新" class="headerlink" title="¶ 其它更新"></a><a href="#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0">¶</a> 其它更新</h3><ul><li>Java8 还有哪些其它更新</li><li>字符串</li><li>Base64</li><li>Random</li><li>Nashorn</li><li>…</li></ul><p>详细分析请参看: <a href="https://www.baidu.com/">Java 8 - 其它更新</a></p><h2 id="¶-参考文档"><a href="#¶-参考文档" class="headerlink" title="¶ 参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">¶</a> 参考文档</h2><blockquote><p>主要参考自以下文档:</p></blockquote><ul><li>Java 8 教程汇总 <a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html">https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html</a></li><li>Java8简明教程gitbook <a href="https://wizardforcel.gitbooks.io/modern-java">https://wizardforcel.gitbooks.io/modern-java</a></li><li>Java8简明教程 <a href="https://github.com/wizardforcel/modern-java-zh">https://github.com/wizardforcel/modern-java-zh</a></li><li>Java8新特性探究 <a href="https://wizardforcel.gitbooks.io/java8-new-features/content/">https://wizardforcel.gitbooks.io/java8-new-features/content/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html元素参考</title>
      <link href="/2022/04/12/html-yuan-su-can-kao/"/>
      <url>/2022/04/12/html-yuan-su-can-kao/</url>
      
        <content type="html"><![CDATA[<h2 id="内容分区"><a href="#内容分区" class="headerlink" title="内容分区"></a>内容分区</h2><blockquote><p>内容分区元素允许你将文档内容从逻辑上进行组织划分。使用包括页眉(header)、页脚(footer)、导航(nav)和标题(h1~h6)等分区元素，来为页面内容创建明确的大纲，以便区分各个章节的内容。</p></blockquote><table><thead><tr><th>元素</th><th align="center">描述</th></tr></thead><tbody><tr><td><code>&lt;address&gt;</code></td><td align="center">HTML <code>&lt;address&gt;</code> 元素 表示其中的 HTML 提供了某个人或某个组织（等等）的联系信息。</td></tr><tr><td><code>&lt;article&gt;</code></td><td align="center"><code>&lt;article&gt;</code>元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</td></tr><tr><td><code>&lt;aside&gt;</code></td><td align="center">HTML <code>&lt;aside&gt;</code> 元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。</td></tr><tr><td><code>&lt;footer&gt;</code></td><td align="center">HTML <code>&lt;footer&gt;</code> 元素表示最近一个章节内容或者根节点（sectioning root ）元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。</td></tr><tr><td><code>&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;</code></td><td align="center">HTML <code>&lt;h1&gt;–&lt;h6&gt;</code> 标题(Heading)元素呈现了六个不同的级别的标题，<code>&lt;h1&gt;</code> 级别最高，而 <code>&lt;h6&gt;</code> 级别最低。</td></tr><tr><td><code>&lt;hgroup&gt;</code></td><td align="center">HTML <code>&lt;hgroup&gt;</code> Element (HTML Headings Group Element) 代表一个段的标题。它规定了在文档轮廓里（the outline of the document ）的单一标题是它所属的隐式或显式部分的标题。</td></tr><tr><td><code>&lt;main&gt;</code></td><td align="center">HTML <code>&lt;main&gt;</code> 元素呈现了文档的 <code>&lt;body&gt;</code> 或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。</td></tr><tr><td><code>&lt;nav&gt;</code></td><td align="center">HTML导航栏 (<code>&lt;nav&gt;</code>) 描绘一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表.</td></tr><tr><td><code>&lt;section&gt;</code></td><td align="center">HTML Section 元素 (<code>&lt;section&gt;</code>) 表示文档中的一个区域（或节），比如，内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题 (<code>&lt;h1&gt;-&lt;h6&gt;</code> element) 作为子节点 来 辨识每一个<code>&lt;section&gt;</code>。</td></tr></tbody></table><h2 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h2><blockquote><p>使用 HTML 文本内容元素来组织在开标签 <code>&lt;body&gt;</code> 和闭标签 <code>&lt;/body&gt;</code> 里的块或章节的内容。这些元素能标识内容的宗旨或结构，而这对于 accessibility 和 SEO 很重要。</p></blockquote><table><thead><tr><th>元素</th><th align="center">描述</th></tr></thead><tbody><tr><td><code>&lt;blockquote&gt;</code></td><td align="center">HTML <code>&lt;blockquote&gt;</code> 元素（或者 HTML 块级引用元素），代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 <code>&lt;cite&gt;</code> 元素。</td></tr><tr><td><code>&lt;dd&gt;</code></td><td align="center">HTML <code>&lt;dd&gt;</code> 元素（HTML 描述元素）用来指明一个描述列表  (<code>&lt;dl&gt;</code>) 元素中一个术语的描述。这个元素只能作为描述列表元素的子元素出现，并且必须跟着一个 <code>&lt;dt&gt;</code> 元素。</td></tr><tr><td><code>&lt;div&gt;</code></td><td align="center">HTML <code>&lt;div&gt;</code> 元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用时才使用 (比如 <code>&lt;article&gt;</code> 或 <code>&lt;nav&gt;</code>) 。</td></tr><tr><td><code>&lt;dl&gt;</code></td><td align="center">HTML <code>&lt;dl&gt;</code> 元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。</td></tr><tr><td><code>&lt;dt&gt;</code></td><td align="center">HTML <code>&lt;dt&gt;</code> 元素 （或 HTML 术语定义元素）用于在一个定义列表中声明一个术语。该元素仅能作为 <code>&lt;dl&gt;</code> 的子元素出现。通常在该元素后面会跟着 <code>&lt;dd&gt;</code> 元素， 然而，多个连续出现的 <code>&lt;dt&gt;</code> 元素都将由出现在它们后面的第一个 <code>&lt;dd&gt;</code> 元素定义。</td></tr><tr><td><code>&lt;figcaption&gt;</code></td><td align="center">HTML <code>&lt;figcaption&gt;</code> 元素 是与其相关联的图片的说明/标题，用?于描述其父节点 <code>&lt;figure&gt;</code> 元素里的其他数据。这意味着 <code>&lt;figcaption&gt;</code>在<code>&lt;figure&gt;</code> 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。</td></tr><tr><td><code>&lt;figure&gt;</code></td><td align="center">HTML <code>&lt;figure&gt;</code> 元素代表一段独立的内容, 经常与说明（caption） <code>&lt;figcaption&gt;</code> 配合使用, 并且作为一个独立的引用单元。当它属于主内容流（main flow）时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。</td></tr><tr><td><code>&lt;hr&gt;</code></td><td align="center">HTML <code>&lt;hr&gt;</code> 元素表示段落级元素之间的主题转换（例如，一个故事中的场景的改变，或一个章节的主题的改变）。在HTML的早期版本中，它是一个水平线。现在它仍能在可视化浏览器中表现为水平线，但目前被定义为语义上的，而不是表现层面上。</td></tr><tr><td><code>&lt;li&gt;</code></td><td align="center">HTML <code>&lt;li&gt;</code> 元素 （或称 HTML 列表条目元素） 用于表示列表里的条目。它必须包含在一个父元素里：一个有序列表(<code>&lt;ol&gt;</code>)，一个无序列表(<code>&lt;ul&gt;</code>)，或者一个菜单 (<code>&lt;menu&gt;</code>)。在菜单或者无序列表里，列表条目通常用点排列显示；在有序列表里，列表条目通常在左边显示按升序排列的计数，例如数字或者字母。</td></tr><tr><td><code>&lt;main&gt;</code></td><td align="center">HTML <code>&lt;main&gt;</code> 元素呈现了文档的 <code>&lt;body&gt;</code> 或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。</td></tr><tr><td><code>&lt;ol&gt;</code></td><td align="center">HTML <code>&lt;ol&gt;</code> 元素 表示多个有序列表项，通常渲染为有带编号的列表。</td></tr><tr><td><code>&lt;p&gt;</code></td><td align="center">HTML <code>&lt;p&gt;</code>元素（或者说 HTML 段落元素）表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，<code>&lt;p&gt;</code> 是块级元素。</td></tr><tr><td><code>&lt;pre&gt;</code></td><td align="center">HTML <code>&lt;pre&gt;</code> 元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在 <code>&lt;pre&gt;</code> 开始标签后的换行符也会被省略)</td></tr><tr><td><code>&lt;ul&gt;</code></td><td align="center">HTML <code>&lt;ul&gt;</code> 元素（或称 HTML 无序列表元素）表示一个内可含多个元素的无序列表或项目符号列表。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些HTML5常用meta标签整理</title>
      <link href="/2022/04/12/html5/"/>
      <url>/2022/04/12/html5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务；<br>html的meta标签描述的头部信息特别多，想记住也不容易，下面这篇文章就对这些标签经行了一个整理！</p></blockquote><p>当然，如果你觉得下面的内容麻烦的话，我整理了一份，你可以直接访问这个链接：<a href="https://github.com/justyeh/tool/blob/master/%E5%B8%B8%E7%94%A8meta%E6%A8%A1%E6%9D%BF/meta.html">常用meta模板页</a></p><h6 id="声明文档使用的字符编码"><a href="#声明文档使用的字符编码" class="headerlink" title="声明文档使用的字符编码"></a>声明文档使用的字符编码</h6><pre class="line-numbers language-none"><code class="language-none">&lt;meta charset='utf-8'&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="声明文档的兼容模式"><a href="#声明文档的兼容模式" class="headerlink" title="声明文档的兼容模式"></a>声明文档的兼容模式</h6><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;&lt;meta name="renderer" content="webkit"&gt;&lt;!-- 避免IE使用兼容模式 --&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="设置页面viewport"><a href="#设置页面viewport" class="headerlink" title="设置页面viewport"></a>设置页面viewport</h6><pre class="line-numbers language-none"><code class="language-none">&lt;meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no" /&gt;//width    设置viewport宽度，为一个正整数，或字符串‘device-width’//height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置//initial-scale    默认缩放比例，为一个数字，可以带小数//minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数//maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数//user-scalable    是否允许手动缩放<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="SEO相关"><a href="#SEO相关" class="headerlink" title="SEO相关"></a>SEO相关</h6><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 页面描述 --&gt;&lt;meta name="description" content="不超过150个字符" /&gt;&lt;!-- 页面关键词 --&gt;&lt;meta name="keywords" content="" /&gt;&lt;!-- 网页作者 --&gt;&lt;meta name="author" content="name, email@gmail.com" /&gt;&lt;!-- 搜索引擎抓取 --&gt;&lt;meta name="robots" content="index,follow" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="移动端属性"><a href="#移动端属性" class="headerlink" title="移动端属性"></a>移动端属性</h6><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 禁止自动自动识别 Email --&gt;&lt;meta name="format-detection" content="email=no"&gt;&lt;!-- 禁止数字识自动别为电话号码 --&gt;&lt;meta name="format-detection" content="telephone=no"&gt;&lt;!-- 禁止自动自动识别日期 --&gt;&lt;meta name="format-detection" content="date=no"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebAPP全屏"><a href="#WebAPP全屏" class="headerlink" title="WebAPP全屏"></a>WebAPP全屏</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 是否启用 WebApp 全屏模式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"apple-mobile-web-app-capable"</span> content<span class="token operator">=</span><span class="token string">"yes"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 仅针对<span class="token constant">IOS</span>的Safari顶端状态条的样式（可选<span class="token keyword">default</span><span class="token operator">/</span>black<span class="token operator">/</span>black<span class="token operator">-</span>translucent ） <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"apple-mobile-web-app-status-bar-style"</span> content<span class="token operator">=</span><span class="token string">"black"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置苹果工具栏颜色 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"apple-mobile-web-app-status-bar-style"</span> content<span class="token operator">=</span><span class="token string">"black"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">UC</span>强制竖屏 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"screen-orientation"</span> content<span class="token operator">=</span><span class="token string">"portrait"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">QQ</span>强制竖屏 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"x5-orientation"</span> content<span class="token operator">=</span><span class="token string">"portrait"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">UC</span>强制全屏 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"full-screen"</span> content<span class="token operator">=</span><span class="token string">"yes"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">QQ</span>强制全屏 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"x5-fullscreen"</span> content<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">UC</span>应用模式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"browsermode"</span> content<span class="token operator">=</span><span class="token string">"application"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">QQ</span>应用模式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"x5-page-mode"</span> content<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Chrome选项卡颜色 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"theme-color"</span> content<span class="token operator">=</span><span class="token string">"#db5945"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 百度禁止转码 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Cache-Control"</span> content<span class="token operator">=</span><span class="token string">"no-siteapp"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加 favicon icon <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"shortcut icon"</span> type<span class="token operator">=</span><span class="token string">"image/ico"</span> href<span class="token operator">=</span><span class="token string">"/favicon.ico"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加 <span class="token constant">RSS</span> 订阅 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"alternate"</span> type<span class="token operator">=</span><span class="token string">"application/rss+xml"</span> title<span class="token operator">=</span><span class="token string">"RSS"</span> href<span class="token operator">=</span><span class="token string">"/rss.xml"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP/2 的那些事</title>
      <link href="/2022/04/10/http-2/"/>
      <url>/2022/04/10/http-2/</url>
      
        <content type="html"><![CDATA[<p>HTTP/2保证了更快的Web和Cloudflare不久以前为所有客户推出了HTTP/2的访问。但HTTP/2的一个特性，优先级，不是因为它从根本上被打破了常规，而是因为浏览器实现它的方式。</p><p>今天，Cloudflare正在推动对HTTP/2优先级的更改，这使我们的服务器能够控制优先级决策，从而真正提高Web的速度。</p><p>历史上，浏览器已经控制决定加载Web内容的方式和时间。今天，我们正在为所有付费计划对该模型进行彻底改变，直接将控制权交给网站所有者。客户可以在Cloudflare仪表板的“速度”选项卡中启用“增强的HTTP/2优先级”：这将通过改进的调度方案覆盖浏览器默认设置，从而显着提高访问者体验（我们在多个场合看到的速度提高了50％）。借助Cloudflare Workers，网站所有者可以更进一步，并根据自己的特定需求完全定制体验。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>网页由数十个（有时数百个）单独的资源组成，这些资源由浏览器加载和组装到最终显示的内容中。这包括用户与之交互的可见内容（HTML，CSS，图像）以及网站本身的应用程序逻辑（JavaScript），广告，跟踪网站使用情况的分析以及营销跟踪信标。对这些资源的加载方式进行排序会对用户查看内容和与页面交互所需的时间产生重大影响。</p><p>浏览器基本上是一个HTML处理引擎，它遍历HTML文档并按照从HTML开始到结束的顺序遵循说明，随着它的进行构建页面。对样式表（CSS）的引用告诉浏览器如何设置页面内容的样式，浏览器将延迟显示内容，直到它加载样式表（因此它知道如何设置要显示的内容的样式）。文档中引用的脚本可能有几种不同的行为。如果脚本被标记为“异步”或“延迟”，则浏览器可以继续处理文档，并在脚本可用时运行脚本代码。如果脚本没有标记为<code>异步</code>或<code>延迟</code>，则浏览器必须停止处理文档，直到脚本下载并执行为止，然后再继续。这些被称为“阻塞”脚本，因为它们阻止浏览器继续处理文档，直到它们被加载和执行。</p><p>HTML文档分为两部分。文档的<code>&lt;head&gt;</code>位于开头，包含显示内容所需的浏览器样式表，脚本和其他说明。文档的<code>&lt;body&gt;</code>位于头部之后，包含浏览器窗口中显示的实际页面内容（尽管脚本和样式表也允许在主体中）。在浏览器到达文档正文之前，没有任何内容可以显示给用户，页面将保持空白，因此尽可能快地浏览文档的头部非常重要。如果你想深入了解细节，“HTML5 rocks”有一个关于浏览器如何工作的精彩教程。</p><p>浏览器通常负责确定加载构建页面所需的不同资源的顺序并继续处理文档。在HTTP/1.x的情况下，浏览器限制它可以一次从任何一个服务器请求多少内容（通常每个连接一次有6个连接和一个资源），因此排序严格由浏览器的方式请求。使用HTTP/2，事情变化非常显着。浏览器可以立即请求所有资源（至少一旦它知道它们），它就向服务器提供有关如何传递资源的详细说明。</p><h2 id="最优资源排序"><a href="#最优资源排序" class="headerlink" title="最优资源排序"></a>最优资源排序</h2><p>对于页面加载周期的大多数部分，存在最佳的资源排序，这将导致最快的用户体验（并且最佳和非最佳之间的差异可能很大 - 多达50％或更多。</p><p>如上所述，在浏览器可以呈现任何内容之前的页面加载周期的早期，它在CSS上被阻止并阻止HTML的<code>&lt;head&gt;</code>部分中的JavaScript。在加载周期的这一部分期间，最好使用100％的连接带宽来下载阻塞资源，并按照HTML中定义的顺序一次下载一个。这使得浏览器在下载下一个阻塞资源时解析并执行每个项目，允许下载和执行流水线。</p><p><img src="https://img.90c.vip/code/img007.png?x-oss-process=image/format,webp" alt="图1"></p><p>当并行下载或一个接一个地下载脚本时，脚本花费相同的时间下载，但是通过顺序下载它们可以处理第一个脚本并在下载第二个脚本时执行。</p><p>一旦加载渲染阻止内容，事情会变得更有趣，最佳加载可能取决于特定网站甚至业务优先级（用户内容与广告与分析等）。特别是字体可能很难，因为浏览器仅在将样式表应用于即将显示的内容之后才发现它需要的字体，所以当浏览器知道字体时，需要显示已经存在的文本准备好被吸引到屏幕上。获取字体的任何延迟最终都会在屏幕上显示空白文本（或使用错误的字体显示文本）。</p><p>通常需要考虑一些权衡：</p><ul><li>应尽快加载页面可见部分（视口）中的自定义字体和可见图像。它们直接影响用户对页面加载的视觉体验。</li><li>非阻塞JavaScript应该相对于其他JavaScript资源以串行方式下载，因此每个JavaScript的执行都可以通过下载进行流水线操作。JavaScript可能包括面向用户的应用程序逻辑以及分析跟踪和营销信标，并且延迟它们可能导致业务跟踪的指标下降。</li><li>图像可以从并行下载中受益。图像文件的前几个字节包含浏览器布局可能需要的图像尺寸，并行的逐行图像下载可以在视觉上完成，传输的字节大约占50％。</li></ul><p>权衡这些权衡，一种在大多数情况下运作良好的策略是：</p><ul><li>自定义字体按顺序下载并使用可见图像分割可用带宽。</li><li>可见图像并行下载，在其中分割带宽的“图像”份额。</li><li>当没有更多字体或可见图像待处理时：<ul><li>非阻塞脚本按顺序下载，并使用不可见图像分割可用带宽</li><li>不可见的图像并行下载，在它们之间分割带宽的“图像”份额。</li></ul></li></ul><p>这样，尽可能快地加载用户可见的内容，尽可能少地延迟应用程序逻辑，并且以尽可能快地完成布局的方式加载不可见图像。</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>为了便于说明，我们将使用典型电子商务网站的简化产品类别页面。在此示例中，页面具有：</p><ul><li>页面本身的HTML文件，由蓝色框表示。</li><li>1个外部样式表（CSS文件），由绿色框表示。</li><li>4个外部脚本（JavaScript），由橙色框表示。其中2个脚本在页面开头处阻塞，2个脚本是异步的。阻止脚本框使用较暗的橙色阴影。</li><li>1个自定义Web字体，由红色框表示。</li><li>13个图像，用紫色框表示。页面徽标和4个产品图像在视口中可见，8个产品图像需要滚动才能看到。5个可见图像使用较深的紫色。</li></ul><p>为简单起见，我们假设所有资源都是相同的大小，每个资源在访问者的连接上下载需要1秒。加载一切总共需要20秒，但如何加载它会对体验产生巨大影响。</p><p><img src="https://img.90c.vip/code/img008.png?x-oss-process=image/format,webp" alt="图2"></p><p>这就是所描述的最佳加载在资源加载时在浏览器中的样子：</p><p><img src="https://img.90c.vip/code/img009.gif?x-oss-process=image/format,webp" alt="图3"></p><ul><li>在加载HTML，CSS和阻止脚本的前4秒内，页面为空白，全部使用100％的连接。</li><li>在4秒标记处，显示页面的背景和结构，没有文本或图像。一秒钟后，在5秒钟，显示页面的文本。</li><li>从5-10秒开始，图像加载，开始时模糊但非常快速地锐化。大约7秒钟的标记几乎与最终版本无法区分。</li><li>在10秒标记处，视口中的所有可视内容都已完成加载。在接下来的2秒内，加载并执行异步JavaScript，运行任何非关键逻辑（分析，营销标签等）。</li><li>在最后的8秒内，其余的产品图像会加载，以便在用户滚动时准备就绪。</li></ul><h2 id="当前浏览器优先级"><a href="#当前浏览器优先级" class="headerlink" title="当前浏览器优先级"></a>当前浏览器优先级</h2><p>所有当前的浏览器引擎都实现了<code>不同的优先级策略</code>，其中没有一个是最佳的。</p><p>Microsoft Edge和Internet Explorer<code>不支持优先级排序</code>，因此所有内容都回退到HTTP/2默认设置，即并行加载所有内容，在所有内容之间均匀分配带宽。Microsoft Edge将在未来的Windows版本中使用Chromium浏览器引擎，这将有助于改善这种情况。在我们的示例页面中，这意味着浏览器在大部分加载时间都停留在头部，因为图像正在减慢阻塞脚本和样式表的传输速度。</p><p><img src="https://img.90c.vip/code/img010.png?x-oss-process=image/format,webp" alt="图4"></p><p>在大多数内容显示之前，在视觉上会导致在空白屏幕上盯着空白屏幕19秒，然后显示文本的延迟时间为1秒。在观看动画进度时请耐心等待，因为对于19秒的空白屏幕，它可能感觉没有任何事情发生（即使它是）：</p><p><img src="https://img.90c.vip/code/img011.gif?x-oss-process=image/format,webp" alt="图5"></p><p>Safari并行加载所有资源，根据Safari认为它们的重要性来划分它们之间的带宽（使用脚本和样式表等渲染阻塞资源比图像更重要）。图像并行加载，但也与渲染阻止内容同时加载。</p><p><img src="https://img.90c.vip/code/img012.png?x-oss-process=image/format,webp" alt="图6"></p><p>虽然类似于Edge，所有内容同时下载，但通过为渲染阻止资源分配更多带宽，Safari可以更快地显示内容：</p><p><img src="https://img.90c.vip/code/img013.gif?x-oss-process=image/format,webp" alt="图7"></p><ul><li>大约8秒后，样式表和脚本已完成加载，因此页面可以开始显示。由于图像是并行加载的，因此它们也可以在其部分状态下呈现（对于渐进图像而言模糊）。这仍然是最佳情况的两倍，但比我们用Edge看到的要好得多。</li><li>在大约11秒时，字体已加载，因此可以显示文本并且已下载更多图像数据，因此图像将更加清晰。这与最佳装载情况下7秒标记周围的体验相当。</li><li>对于剩余的9秒加载，图像变得更清晰，因为下载的数据越多，直到最终在20秒完成。</li></ul><p><code>Firefox</code>构建一个依赖关系树，该树将<code>资源分组</code>，然后安排这些组要么一个接一个地加载，要么在组之间共享带宽。在给定组内，资源共享带宽并同时​​下载。这些映像计划在渲染阻塞样式表之后加载并且并行加载，但渲染阻塞脚本和样式表也会并行加载，并且不会获得流水线操作的好处。</p><p><img src="https://img.90c.vip/code/img014.png?x-oss-process=image/format,webp" alt="图8"></p><p>在我们的示例中，由于图像被延迟到样式表完成之后，因此最终会比Safari快一点。</p><p><img src="https://img.90c.vip/code/img015.gif?x-oss-process=image/format,webp" alt="图9"></p><ul><li>在6秒标记处，初始页面内容使用产品图像的背景和模糊版本进行渲染（与Safari的8秒和最佳情况的4秒相比）。</li><li>在8秒时，字体已加载，文本可以与产品图像的稍微更清晰的版本一起显示（相比于Safari的11秒和Optimal案例中的7秒）。</li><li>对于剩余的12秒加载，产品图像在剩余内容加载时变得更清晰。</li></ul><p><code>Chrome</code>（以及所有基于Chromium的浏览器）将资源优先排序到列表中。这对于渲染阻止内容非常有效，这些内容可以从按顺序加载中受益，但对图像效果不佳。在开始下一张图像之前，每张图像加载到100％完成。</p><p><img src="https://img.90c.vip/code/img016.png?x-oss-process=image/format,webp" alt="图10"></p><p>在实践中，这几乎与最佳装载情况一样好，唯一的区别是图像一次加载一个而不是并行加载：</p><p><img src="https://img.90c.vip/code/img017.gif?x-oss-process=image/format,webp" alt="图11"></p><ul><li>直到5秒标记，Chrome体验与最佳情况相同，显示背景为4秒，文本内容为5。</li><li>在接下来的5秒内，可见图像一次加载一个，直到它们在10秒标记处全部完成（与最佳情况相比，它们在7秒时稍微模糊并且在剩余的3秒内锐化）。</li><li>在页面的可视部分在10秒完成后（与最佳情况相同），剩余的10秒用于运行异步脚本并加载隐藏图像（就像最佳加载情况一样）。</li></ul><h2 id="视觉比较"><a href="#视觉比较" class="headerlink" title="视觉比较"></a>视觉比较</h2><p>在视觉上，影响可能非常显着，即使它们都花费相同的时间来技术上加载所有内容：<br><img src="https://img.90c.vip/code/img018.gif?x-oss-process=image/format,webp" alt="图12"></p><h2 id="服务器端优先级"><a href="#服务器端优先级" class="headerlink" title="服务器端优先级"></a>服务器端优先级</h2><p>客户端（浏览器）请求HTTP/2优先级排序，由服务器根据请求决定做什么。许多服务器不支持在确定优先级时执行任何操作，但对于那些服务器，它们都支持客户端的请求。另一个选择是考虑客户端的请求，决定在服务器端使用的最佳优先级。</p><p>根据规范，HTTP/2优先级是一个依赖树，它需要完全了解所有正在进行的请求，以便能够相互优先考虑资源。这允许非常复杂的策略，但很难在浏览器或服务器端实现良好（由不同的浏览器策略和不同级别的服务器支持证明）。为了使优先级更易于管理，我们开发了一种更简单的优先级方案，该方案仍然具有优化调度所需的所有灵活性。</p><p>Cloudflare优先级划分方案由64个优先级“级别”组成，在每个优先级内，有一组资源可确定如何在它们之间共享连接：</p><p><img src="https://img.90c.vip/code/img019.png?x-oss-process=image/format,webp" alt="图13"></p><p>在进入下一个较低优先级之前，将转移所有较高优先级的资源。</p><p>在给定的优先级内，有3个不同的“并发”组：</p><ul><li>0：并发“0”组中的所有资源按照请求的顺序依次发送，使用100％的带宽。只有在下载了所有并发“0”组资源之后，才会考虑同一级别的其他组。</li><li>1：并发“1”组中的所有资源按请求顺序依次发送。可用带宽在并发“1”组和并发“n”组之间均匀分配。</li><li>n：并发“n”组中的资源是并行发送的，将它们之间可用的带宽分开。</li></ul><p>实际上，并发“0”组对于需要按顺序处理的关键内容（脚本，CSS等）非常有用。并发“1”组对于不太重要的内容非常有用，这些内容可以与其他资源共享带宽，但资源本身仍然可以从顺序处理（异步脚本，非渐进式图像等）中受益。并发“n”组对于受益于并行处理（渐进式图像，视频，音频等）的资源非常有用。</p><h2 id="Cloudflare默认优先级"><a href="#Cloudflare默认优先级" class="headerlink" title="Cloudflare默认优先级"></a>Cloudflare默认优先级</h2><p>启用时，增强的优先级实现上述资源的“最佳”调度。应用的特定优先级如下所示：</p><p><img src="https://img.90c.vip/code/img020.png?x-oss-process=image/format,webp" alt="图14"></p><p>该优先化方案允许串行发送呈现阻止内容，然后并行发送可见图像，然后通过某种程度的共享来覆盖页面内容的其余部分以平衡应用程序和内容加载。“* If Detectable”警告是，并非所有浏览器都区分不同类型的样式表和脚本，但在所有情况下它仍然会明显更快。默认情况下快50％，特别是Edge和Safari访客并不罕见：</p><p><img src="https://img.90c.vip/code/img021.png?x-oss-process=image/format,webp" alt="图15"></p><h2 id="自定义工人的优先级"><a href="#自定义工人的优先级" class="headerlink" title="自定义工人的优先级"></a>自定义工人的优先级</h2><p>默认情况下更快，但事情变得非常有趣的是，配置优先级的能力也暴露给Cloudflare Workers，因此站点可以覆盖资源的默认优先级或实现自己的完整优先级方案。</p><p>如果Worker为响应添加“cf-priority”标头，则Cloudflare边缘服务器将使用指定的优先级和并发响应。标头的格式是<code>&lt;priority&gt; / &lt;concurrency&gt;</code>，所以像<code>response.headers.set（'cf-priority'，“30/0”）</code>;对于给定的响应，将优先级设置为30，并发度为0。类似地，“30/1”将并发设置为1，“30 / n”将并发设置为n。</p><p>通过这种灵活性，站点可以调整资源优先级以满足其需求。例如，在浏览器识别出它们位于视口中之前，提升某些关键异步脚本的优先级或增加图像的优先级。</p><p>为了帮助通知任何优先级决策，Workers运行时还在传递给Worker的fetch事件侦听器（request.cf.requestPriority）的请求对象中公开浏览器请求的优先级信息。传入的请求优先级是以分号分隔的属性列表，其类似于：“weight = 192; exclusive = 0; group = 3; group-weight = 127”。</p><ul><li><code>weight</code>：HTTP/2优先级的浏览器请求权重。</li><li><code>exclusive</code>：浏览器请求的HTTP/2独占标志（基于Chromium的浏览器为1，其他为0）。</li><li><code>group</code>：请求组的HTTP/2流ID（Firefox仅为非零）。</li><li><code>group-weight</code>：请求组的HTTP/2权重（Firefox仅为非零）。</li></ul><h2 id="这仅仅是个开始"><a href="#这仅仅是个开始" class="headerlink" title="这仅仅是个开始"></a>这仅仅是个开始</h2><p>调整和控制响应优先级的能力是许多未来工作将从中受益的基本构建块。我们将在它之上实现我们自己的高级优化，但是通过将它暴露在Workers中，我们还向网站和研究人员开放，以尝试不同的优先级策略。通过Apps Marketplace，公司还可以在Workers平台之上构建新的优化服务，并使其可供其他站点使用。</p><p>如果您使用Pro计划或更高版本，请转到Cloudflare仪表板中的速度选项卡，然后启用“增强的HTTP/2优先级”以加速您的站点。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我希望你发现这篇文章有用！你可以关注我的博客。请在下面的评论中留下任何问题。我很乐意帮忙！</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习-总结</title>
      <link href="/2022/04/10/javascript-xue-xi-zong-jie/"/>
      <url>/2022/04/10/javascript-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>JavaScript 是一种面向对象的动态语言，它包含类型、运算符、标准内置（ built-in）对象和方法。它的语法来源于 Java 和 C，所以这两种语言的许多语法特性同样适用于 JavaScript。需要注意的一个主要区别是 JavaScript 不支持类，类这一概念在 JavaScript 通过对象原型（object prototype）得到延续。另一个主要区别是 JavaScript 中的函数也是对象，JavaScript 允许函数在包含可执行代码的同时，能像其他对象一样被传递。</p><h2 id="数据类型和结构"><a href="#数据类型和结构" class="headerlink" title="数据类型和结构"></a>数据类型和结构</h2><h3 id="1-动态类型"><a href="#1-动态类型" class="headerlink" title="1. 动态类型"></a>1. 动态类型</h3><p><code>JavaScript</code>是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据：</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token comment">// foo is a Number now</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span> <span class="token comment">// foo is a String now</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// foo is a Boolean now</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p>最新的<code>ECMAScript</code>标准定义了 7 种数据类型:</p><ul><li>6 种原始类型<ul><li><code>Null</code> (空, 只有一个值<code>null</code>)</li><li><code>Undefined</code> (未定义, 一个没有被赋值的变量的默认值是<code>undefined</code>):</li><li><code>Boolean</code> (布尔, 可以有两个值：<code>true</code> 和 <code>false</code>)</li><li><code>Number</code> (数字)</li><li><code>String</code> (字符串)</li><li><code>Symbol</code> (符号, ECMAScript 6 新定义的类型，表示独一无二的值)</li></ul></li><li>和 <code>Object</code> (对象)<ul><li><code>Function</code> (函数)</li><li><code>Array</code> (数组)</li><li><code>Date</code> (日期)</li><li><code>JSON</code> (JS对象标识,来序列化对象、数组、数值、字符串、布尔值和 <code>null</code>)</li><li><code>Math</code> (数学方面的计算)</li><li><code>RegExp</code> (正则表达式)</li><li><code>Error</code> (错误)</li><li><code>Map</code></li><li><code>Set</code></li></ul></li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>这里的<strong>内置对象</strong>指的是在全局作用域(<code>global scope</code>)中的对象，由于很多，不再一一列出说明，更全面的解释在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">这里</a>。</p><p>全局对象本身可通过<code>this</code>操作符在全局作用域中获得。实际上，全局作用域就是由全局对象的各个属性组成的（包括继承来的属性）。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>除了正常运行模式，ECMAscript 5添加了第二种运行模式：”严格模式”（<code>strict mode</code>）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p><p>严格模式可以应用到整个script标签或个别函数中。设立”严格模式”的目的，主要有以下几个：</p><ul><li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的 Javascript 做好铺垫。</li></ul><h3 id="为某个script标签开启严格模式"><a href="#为某个script标签开启严格模式" class="headerlink" title="为某个script标签开启严格模式"></a>为某个script标签开启严格模式</h3><p>进入严格模式的标志，是下面这行语句：</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="为某个函数开启严格模式"><a href="#为某个函数开启严格模式" class="headerlink" title="为某个函数开启严格模式"></a>为某个函数开启严格模式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 函数级别严格模式语法</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"I'm a strict mode function!  "</span> <span class="token operator">+</span> <span class="token function">nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">notStrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"I'm not strict."</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相等性判断"><a href="#相等性判断" class="headerlink" title="相等性判断"></a>相等性判断</h2><p>JavaScript提供三种不同的值比较操作：</p><ul><li>严格相等 (“triple equals” 或 “identity”)，使用<code>===</code></li><li>宽松相等 (“double equals”) ，使用<code>==</code></li><li>以及<code>Object.is</code> (ECMAScript 2015/ ES6 新特性)</li></ul><p>简而言之，在比较两件事情时，双等号将执行类型转换; 三等号将进行相同的比较，而不进行类型转换 (如果类型不同, 只是总会返回 false ); 而<code>Object.is</code>的行为方式与三等号相同，但是对于NaN和-0和+0进行特殊处理，所以最后两个不相同，而<code>Object.is(NaN，NaN)</code>将为 true。</p><p><img src="https://statics.sh1a.qingstor.com/2020/11/27/js_equals.png" alt="各原始类型值的相等比较对照表"><strong>各原始类型值的相等比较对照表</strong></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有<strong>全局作用域</strong>和<strong>局部作用域</strong>两种。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域。一般来说以下几种情形：</p><ul><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域。</li><li>所有未定义而直接赋值的变量自动声明为拥有全局作用域。</li><li>所有window对象的属性拥有全局作用域。如：<code>window.name</code>、<code>window.location</code>等。</li></ul><blockquote><p><strong>注</strong>：全局变量存在于程序的整个生命周期。没有块级作用域。</p></blockquote><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域一般只在固定的代码片段内可访问到，最常见的是在函数内部，所有在一些地方也会看到有人把这种作用域称为<strong>函数作用域</strong>。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>JavaScript里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JavaScript引擎访问的内部属性。其中一个内部属性是<code>Scope</code>，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p><p>因为全局变量总是存在于<strong>运行时上下文</strong>作用域链的最末端。所以，在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：<strong>如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用</strong>。</p><p><code>with</code>语句主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"yhb"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">175</span><span class="token punctuation">,</span> <span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lwy"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span>wife<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>with语句将<code>person.wife</code>添加到当前作用域链的头部，所以输出的就是：<code>lwy</code>；with语句结束后，作用域链恢复正常。</p><blockquote><p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。<br><strong>注</strong>：在程序中应避免使用with语句。</p></blockquote><h2 id="闭包-Closures"><a href="#闭包-Closures" class="headerlink" title="闭包(Closures)"></a>闭包(Closures)</h2><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>如何从外部读取局部变量？</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 999</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（<code>chain scope</code>），子对象会一级一级地向上寻找所有父对象的变量。所以，<strong>父对象的所有变量，对子对象都是可见的，反之则不成立</strong>。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 999</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包解释"><a href="#闭包解释" class="headerlink" title="闭包解释"></a>闭包解释</h3><blockquote><p><strong>闭包定义</strong>：闭包是一个函数和函数所声明的词法环境的结合。</p></blockquote><p>在上面的代码中，f2函数就是闭包。<strong>闭包</strong>（<code>closure</code>）定义非常抽象，很难看懂。我的理解是，<strong>闭包就是能够读取其他函数内部变量的函数</strong>。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在调用结束后被垃圾回收机制（<code>garbage collection</code>）回收。</p><h3 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h3><p>有时你想模拟一个模拟块级作用域，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做<code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 块开始</span>    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>  <span class="token comment">// 非全局变量</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 块结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用闭包模拟私有方法"><a href="#用闭包模拟私有方法" class="headerlink" title="用闭包模拟私有方法"></a>用闭包模拟私有方法</h3><p>JavaScript 并不提供原生的支持私有方法，但是可以使用闭包模拟私有方法。私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        privateCounter <span class="token operator">+=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* logs 0 */</span>Counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* logs 2 */</span>Counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* logs 1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面创建了一个环境，为三个函数所共享：<code>Counter.increment</code>, <code>Counter.decrement</code>和<code>Counter.value</code>。该共享环境创建于一个匿名函数体内，该函数一经定义立刻执行。环境中包含两个私有项：名为<code>privateCounter</code>的变量和名为<code>changeBy</code>的函数。这两项都无法在匿名函数外部直接访问。必须通过匿名包装器返回的三个公共函数访问。</p><p><strong>注意</strong>：</p><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ul><h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><p>首先JavaScript中的变量分为<strong>基本类型</strong>和<strong>引用类型</strong>。</p><ul><li>基本类型就是保存在栈内存中的简单数据段。基本类型有<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和<code>String</code>。这些类型在内存中分别占有固定大小的空间，他们的值保存在<strong>栈空间</strong>，我们通过按值来访问的。</li><li>引用类型指的是那些保存在堆内存中的对象。引用类型，值大小不固定，栈内存中存放地址指向堆内存中的对象。是按引用访问的。栈内存中存放的只是该对象的访问地址，在堆内存中为这个值分配空间。</li></ul><h3 id="为什么会有栈内存和堆内存之分？"><a href="#为什么会有栈内存和堆内存之分？" class="headerlink" title="为什么会有栈内存和堆内存之分？"></a>为什么会有栈内存和堆内存之分？</h3><p>与垃圾回收机制有关，为了使程序运行时占用的内存最小。</p><p>当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；</p><p>当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它。</p><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>Javascript具有自动垃圾回收机制(<code>GC</code>:<code>Garbage Collecation</code>)，也就是说，执行环境会负责管理代码执行过程中使用的内存。</p><p>JavaScript垃圾回收的机制很简单：<strong>找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行</strong>。</p><p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p><h4 id="清除方式"><a href="#清除方式" class="headerlink" title="清除方式"></a>清除方式</h4><ul><li><strong>标记清除</strong>：垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</li><li><strong>引用计数</strong>：引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</li></ul><h2 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型(prototype)"></a>原型(prototype)</h2><p>原型是一个对象，其他对象可以通过它实现属性继承。JavaScript的对象中都包含了一个<code>Prototype</code>内部属性，这个属性所对应的就是该对象的原型。<code>Prototype</code>作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了<code>__proto__</code>这个非标准的访问器。</p><ul><li>所有的对象都有<code>__proto__</code>属性，该属性对应着该对象的原型。</li><li>所有的函数对象都有<code>prototype</code>属性，该属性的值会被赋值给该函数创建的对象的<code>__proto__</code>属性</li><li>所有的原型对象都有<code>constructor</code>属性，该属性对应创建所有指向该原型的实例的构造函数</li><li>函数对象和原型对象通过<code>prototype</code>和<code>constructor</code>属性进行相互关联</li><li><code>Object</code>实例对象的原型<code>obj.__proto__</code>就是<code>Object.prototype</code></li><li><code>hasOwnProperty</code>是<code>Object.prototype</code>的一个方法，该方法能判断一个对象是否包含自定义属性而不是原型链上的属性，因为”hasOwnProperty” 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>因为每个对象和原型都有原型，对象的原型指向对象的父，而父的原型又指向父的父，这种原型层层连接起来的就构成了原型链。</p><p>当通过原型链查找一个属性的时候，首先查找的是对象本身的属性，如果找不到才会继续按照原型链进行查找。这样一来，如果想要覆盖原型链上的一些属性，我们就可以直接在对象中引入这些属性，达到属性隐藏的效果。</p><h2 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h2><h3 id="1-Object构造函数方式"><a href="#1-Object构造函数方式" class="headerlink" title="1. Object构造函数方式"></a>1. Object构造函数方式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nike'</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这行代码创建了<code>Object</code>引用类型的一个新实例，然后把实例保存在变量<code>Person</code>中。</p><h3 id="2-对象字面量方式"><a href="#2-对象字面量方式" class="headerlink" title="2. 对象字面量方式"></a>2. 对象字面量方式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nike'</span><span class="token punctuation">;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性对象的过程。</p><blockquote><p><strong>注</strong>：前两种方法的缺点在于：它们都是用了同一个接口创建很多对象，会产生大量的重复代码，就是如果你有100个对象，那你要输入100次很多相同的代码。那我们有什么方法来避免过多的重复代码呢，就是把创建对象的过程封装在函数体内，通过函数的调用直接生成对象。</p></blockquote><h3 id="3-工厂模式"><a href="#3-工厂模式" class="headerlink" title="3. 工厂模式"></a>3. 工厂模式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'Nike'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用工厂模式创建对象的时候，我们都可以注意到，在<code>createPerson</code>函数中，返回的是一个对象。但我们就无法判断返回的对象究竟是一个什么样的类型。于是就出现了第四种创建对象的模式。</p><h3 id="4-构造函数方式"><a href="#4-构造函数方式" class="headerlink" title="4. 构造函数方式"></a>4. 构造函数方式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Nike'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ture</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比工厂模式，我们可以发现以下区别：</p><ul><li>没有显示地创建对象</li><li>直接将属性和方法赋给了<code>this</code>对象</li><li>没有<code>return</code>语句</li><li>终于可以识别的对象的类型。对于检测对象类型，我们应该使用instanceof操作符，我们来进行自主检测：</li></ul><p>那么构造函数确实挺好用的，但是它也有它的缺点：就是每个方法都要在每个实例上重新创建一遍，方法指的就是我们在对象里面定义的函数。如果方法的数量很多，就会占用很多不必要的内存。于是出现了第五种创建对象的方法。</p><h3 id="5-原型创建对象模式"><a href="#5-原型创建对象模式" class="headerlink" title="5. 原型创建对象模式"></a>5. 原型创建对象模式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nike'</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>jbo <span class="token operator">=</span> <span class="token string">'teacher'</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Greg'</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'Greg' --来自实例</span><span class="token function">alert</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'Nike' --来自原型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性。</p><p>这时候我们就可以使用构造函数模式与原型模式结合的方式，构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。</p><h3 id="6-组合使用构造函数模式和原型模式"><a href="#6-组合使用构造函数模式和原型模式" class="headerlink" title="6. 组合使用构造函数模式和原型模式"></a>6. 组合使用构造函数模式和原型模式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>    <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Nike'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-动态原型模式"><a href="#7-动态原型模式" class="headerlink" title="7. 动态原型模式"></a>7. 动态原型模式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">!=</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Nike'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态原型模式将所有信息封装在了构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。</p><h3 id="8-寄生构造函数方式"><a href="#8-寄生构造函数方式" class="headerlink" title="8. 寄生构造函数方式"></a>8. 寄生构造函数方式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Nike'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寄生模式和工厂模式几乎一样，寄生模式和工厂模式的区别：</p><ul><li>寄生模式创建对象时使用了<code>new</code>关键字</li><li>寄生模式的外部包装函数是一个构造函数</li></ul><blockquote><p><strong>作用</strong>:寄生模式可以在特殊的情况下为对象来创建构造函数,原因在于我们可以通过构造函数重写对象的值，并通过return返回。重写调用构造函数(创建的对象的实例)之后的对象实例的新的值。</p></blockquote><h3 id="9-稳妥构造函数方式"><a href="#9-稳妥构造函数方式" class="headerlink" title="9. 稳妥构造函数方式"></a>9. 稳妥构造函数方式</h3><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Nike'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用稳妥构造函数模式只能通过其构造函数内部的方法来获取里面的属性值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>道格拉斯·克拉克福德发明了JavaScript中的稳妥对象这个概念。所谓稳妥对象，是指没有公共属性，而且其方法也不引用<code>this</code>对象。稳妥对象最适合在一些安全环境中（这些环境会禁止使用<code>this</code>和<code>new</code>），或者在防止数据被其他应用程序改动时使用。稳妥构造函数遵循的与寄生构造函数类似的模式，但又两点不同：</p><ul><li>一是新创建对象的实例方法不引用<code>this</code>；</li><li>二是不使用<code>new</code>操作符调用构造函数。</li></ul><blockquote><p><strong>注</strong>：与寄生构造函数模式类似，使用稳妥构造函数模式创建的对象与构造函数之间没有什么关系，因此instanceof操作符对这种对象也没有意义。</p></blockquote><h2 id="并发模型和事件循环-event-loop"><a href="#并发模型和事件循环-event-loop" class="headerlink" title="并发模型和事件循环(event loop)"></a>并发模型和事件循环(event loop)</h2><p>JavaScript 的并发模型基于<strong>事件循环</strong>。</p><p><img src="https://statics.sh1a.qingstor.com/2020/11/27/js_event.png" alt="Js堆栈队列图"><strong>Js堆栈队列图</strong></p><h3 id="1-运行时概念"><a href="#1-运行时概念" class="headerlink" title="1. 运行时概念"></a>1. 运行时概念</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>函数调用形成了一个栈帧。</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用 bar 时，创建了第一个帧 ，帧中包含了 bar 的参数和局部变量。当 bar 调用 foo 时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了 foo 的参数和局部变量。当 foo 返回时，最上层的帧就被弹出栈（剩下 bar 函数的调用帧 ）。当 bar 返回的时候，栈就空了。</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域。</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都与一个函数相关联。当栈拥有足够内存时，从队列中取出一个消息进行处理。这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧）。当栈再次为空的时候，也就意味着消息处理结束。</p><h3 id="2-事件循环"><a href="#2-事件循环" class="headerlink" title="2. 事件循环"></a>2. 事件循环</h3><p>之所以称为<strong>事件循环</strong>，是因为它经常被用于类似如下的方式来实现：</p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">waitForMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  queue<span class="token punctuation">.</span><span class="token function">processNextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果当前没有任何消息，queue.waitForMessage 会等待着同步将要到来的消息。</p><p>每一个消息完整的执行后，其它消息才会被执行。这个模型的一个缺点在于当一个消息的完成耗时过长，网络应用无法处理用户的交互如点击或者滚动。浏览器用“程序需要过长时间运行”的对话框来缓解这个问题。一个比较好的解决方案是使消息处理变短且如果可能的话，将一个消息拆分成几个消息。</p><p>在浏览器里，当一个事件出现且有一个事件监听器被绑定时，消息会被随时添加。如果没有事件监听器，事件会丢失。所以点击一个附带点击事件处理函数的元素会添加一个消息。其它事件亦然。</p><h3 id="3-绝不阻塞"><a href="#3-绝不阻塞" class="headerlink" title="3. 绝不阻塞"></a>3. 绝不阻塞</h3><p>事件循环(event loop)模型特性在于它<strong>永不阻塞</strong>。通常由事件或者回调函数进行 I/O (input/output)处理 。</p><hr><p>参考文档：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础知识总结</title>
      <link href="/2022/04/08/vue-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2022/04/08/vue-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p></blockquote><p>过滤器的种类：</p><ul><li>全局过滤器：创建 Vue 实例之前全局定义过滤器</li><li>局部过滤器：在一个组件的选项中定义本地的过滤器</li></ul><p>tip：当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p><p>全局过滤器</p><pre class="line-numbers language-none"><code class="language-none">Vue.filter('过滤器名称', function (value[,param1,...] ) {  //逻辑代码})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义局部过滤器</p><pre class="line-numbers language-none"><code class="language-none">new Vue({         filters: {           '过滤器名称': function (value[,param1,...] ) {          // 逻辑代码            }     }    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用过滤器</p><pre class="line-numbers language-none"><code class="language-none">{{ 表达式 |  过滤器名字}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;div id="myDiv"&gt;    &lt;p&gt;未使用过滤器: {{birthday}}&lt;/p&gt;    &lt;p&gt;{{birthday | dataFormat}}&lt;/p&gt;    &lt;p&gt;未使用过滤器: {{message}}&lt;/p&gt;    &lt;p&gt;将钟替换为王: {{message | messageFormat}}&lt;/p&gt;    &lt;p&gt;不传参,默认使用刘: {{message | paramFormat}}&lt;/p&gt;    &lt;p&gt;传参,使用参数: {{message | paramFormat("罗")}}&lt;/p&gt;  &lt;/div&gt;  &lt;script src="./js/vue.js"&gt;&lt;/script&gt;  &lt;script src="./js/moment.js"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;    Vue.filter("dataFormat", (value) =&gt; {      return moment(value).format("YYYY-MM-DD HH:mm:ss");    });    Vue.filter("messageFormat", (value) =&gt; {      return value.replace('钟', "王")    });    const app = new Vue({      el: "#myDiv",      data: {        birthday: new Date(),        message: '钟先生要出人头地'      },      filters: {        'paramFormat': (value, param = "刘") =&gt; {          return value.replace("钟", param)        }      }    })  &lt;/script&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cdn.xn2001.com/img/2021/20210318163801.png"><img src="https://cdn.xn2001.com/img/2021/20210318163801.png"></a></p><h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h1><blockquote><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p></blockquote><p><code>watch</code> 可以让我们监控一个值的变化。从而做出相应的反应。</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;div id="app"&gt;    &lt;input type="text" v-model='message'&gt;  &lt;/div&gt;  &lt;script src="./js/vue.js"&gt;&lt;/script&gt;  &lt;script&gt;    const app = new Vue({      el: '#app',      data: {        message: 'Hello World',      },      watch: {        message(newMessage, oldMessage) {          console.log('新的值' + newMessage);          console.log('旧的值' + oldMessage);        }      }    })  &lt;/script&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>深度监控</strong></p><p>如果监控的是一个对象，需要进行深度监控，才能监控到对象中属性的变化。</p><p>以前定义监控时，person 是一个函数，现在改成了对象，并且要指定两个属性：</p><ul><li><code>deep</code>：代表深度监控，不仅监控 person 变化，也监控 person 中属性变化</li><li><code>handler</code>：监控处理函数</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;div id="app"&gt;    &lt;input type="text" v-model="person.name"&gt;&lt;br&gt;    &lt;input type="text" v-model="person.age"&gt;    &lt;button @click="person.age++"&gt;+&lt;/button&gt;    &lt;h2&gt;      姓名为：{{person.name}}；年龄为：{{person.age}}    &lt;/h2&gt;  &lt;/div&gt;  &lt;script src="./js/vue.js"&gt;&lt;/script&gt;  &lt;script&gt;    const app = new Vue({      el: '#app',      data: {        person: {}      },      watch: {        person: {          deep: true,          handler(obj) {            console.log("name = " + obj.name + ", age=" + obj.age);          }        }      }    })  &lt;/script&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。例如可能会有相同的头部导航。所以我们会把页面的不同部分拆分成独立的组件，然后在不同页面就可以共享这些组件，避免重复开发。</p><ul><li><strong>组件其实也是一个 Vue 实例，因此它在定义时也会接收：data、methods、生命周期函数等</strong></li><li>不同的是组件不会与页面的元素绑定，否则就无法复用了，因此没有 el 属性</li><li>但是组件渲染需要 html 模板，所以增加了 template 属性，值就是 HTML 模板</li><li>全局组件定义完毕，任何 vue 实例都可以直接在 HTML 中通过组件名称来使用组件</li><li><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝</li><li>组件可以多次复用</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;!--使用定义好的全局组件--&gt;  &lt;counter&gt;&lt;/counter&gt;&lt;/div&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;  // 定义全局组件，两个参数：1，组件名称。2，组件参数  Vue.component("counter",{    template:'&lt;button v-on:click="count++"&gt;你点了我 {{ count }} 次，我记住了.&lt;/button&gt;',    data(){      return {        count:0      }    }  })  var app = new Vue({    el:"#app"  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><p>一旦全局注册，就意味着即便以后你不再使用这个组件，它依然会随着 Vue 的加载而加载。</p><p>因此，对于一些并不频繁使用的组件，我们会采用局部注册。</p><p>我们先在外部定义一个对象，结构与创建组件时传递的第二个参数一致：</p><pre class="line-numbers language-none"><code class="language-none">const counter = {  template:'&lt;button v-on:click="count++"&gt;你点了我 {{ count }} 次，我记住了.&lt;/button&gt;',  data(){    return {      count: 0    }  }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 vue 页面中使用</p><pre class="line-numbers language-none"><code class="language-none">var app = new Vue({  el:"#app",  components:{    counter: counter // 将定义的对象注册为组件  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>components 就是当前 Vue 对象子组件集合。</li><li>效果与刚才的全局注册是类似的，不同的是，这个 counter 组件只能在当前的 Vue 实例中使用</li></ul><h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><p>我们定义一个子组件，并接受复杂数据：</p><pre class="line-numbers language-none"><code class="language-none">const myList = {  template: '&lt;ul&gt;&lt;li v-for="item in items" :key="item.id"&gt; {{item.id}} : {{item.name}} &lt;/li&gt;&lt;/ul&gt;',  props: {    items: {      type: Array,      default: [],      required: true    }  }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个子组件可以对 items 进行迭代，并输出到页面。</p><p>props：定义需要从父组件中接收的属性</p><p>items：是要接收的属性名称</p><ul><li>type：限定父组件传递来的必须是数组</li><li>default：默认值</li><li>required：是否必须</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;!-- 使用子组件的同时，传递属性，这里使用了v-bind，指向了父组件自己的属性lessons --&gt;  &lt;my-list :items="lessons"/&gt;&lt;/div&gt;&lt;script&gt;  var app = new Vue({    el: "#app",    components:{      myList     },    data: {      lessons:[        {id:1, name: 'java'},        {id:2, name: 'python'},        {id:3, name: 'ui'},      ]    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外看这个案例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;    &lt;h2&gt;num: {{num}} &lt;/h2&gt;    &lt;!--使用子组件的时候，传递num到子组件中--&gt;    &lt;counter :num="num"&gt;&lt;/counter&gt;&lt;/div&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt;  // 子组件，定义了两个按钮，点击数字num会加或减  Vue.component("counter", {      template:'\            &lt;div&gt;\                &lt;button @click="num++"&gt;加&lt;/button&gt;  \                &lt;button @click="num--"&gt;减&lt;/button&gt;  \            &lt;/div&gt;',      props:['num']// count是从父组件获取的。  })  var app = new Vue({    el:"#app",    data: {      num: 0    }  })&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>h2 中的 num 是修改不了的，为什么呢？子组件接收到父组件属性后，默认是不允许修改的。在官方文档也解释到了。<a href="https://cn.vuejs.org/v2/guide/components-props.html">https://cn.vuejs.org/v2/guide/components-props.html</a></p><p>只有父组件能修改，那么加和减的操作一定是放在父组件：</p><pre class="line-numbers language-none"><code class="language-none">var app = new Vue({  el:"#app",  data:{    num: 0  },  methods:{ // 父组件中定义操作num的方法    increment(){      this.num++;    },    decrement(){      this.num--;    }  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以<strong>通过v-on指令将父组件的函数绑定到子组件</strong>上：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="app"&gt;  &lt;h2&gt;num: {{num}}&lt;/h2&gt;  &lt;counter :count="num" @inc="increment" @dec="decrement"&gt;&lt;/counter&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在子组件中定义函数，函数的具体实现调用父组件的实现，并在子组件中调用这些函数。当子组件中按钮被点击时，调用绑定的函数：</p><pre class="line-numbers language-none"><code class="language-none">Vue.component("counter", {  template:'\    &lt;div&gt;\        &lt;button @click="plus"&gt;加&lt;/button&gt;  \            &lt;button @click="reduce"&gt;减&lt;/button&gt;  \        &lt;/div&gt;',  props:['count'],  methods:{    plus(){      this.$emit("inc");    },    reduce(){      this.$emit("dec");    }  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说：<strong>vue 提供了一个内置的 <code>this.$emit()</code> 函数，用来调用父组件绑定的函数</strong></p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="案例使用"><a href="#案例使用" class="headerlink" title="案例使用"></a>案例使用</h2><p>现在我们来实现这样一个功能：一个页面，包含登录和注册，点击不同按钮，实现登录和注册页切换。</p><p><a href="https://cdn.xn2001.com/img/2021/20210324083706.gif"><img src="https://cdn.xn2001.com/img/2021/20210324083706.gif"></a></p><p>首先我们需要先创建两个组件，分别是登录和注册</p><p>login.js</p><pre class="line-numbers language-none"><code class="language-none">const loginForm = {  template:'\  &lt;div&gt;\  &lt;h2&gt;登录页&lt;/h2&gt; \  用户名：&lt;input type="text"&gt;&lt;br/&gt;\  密码：&lt;input type="password"&gt;&lt;br/&gt;\  &lt;/div&gt;\  '}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>register.js</p><pre class="line-numbers language-none"><code class="language-none">const registerForm = {  template:'\  &lt;div&gt;\  &lt;h2&gt;注册页&lt;/h2&gt; \  用&amp;ensp;户&amp;ensp;名：&lt;input type="text"&gt;&lt;br/&gt;\  密&amp;emsp;&amp;emsp;码：&lt;input type="password"&gt;&lt;br/&gt;\  确认密码：&lt;input type="password"&gt;&lt;br/&gt;\  &lt;/div&gt;\  '}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在首页中分别引入它们</p><p>index.html</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;  &lt;div id="app" style="text-align: center;font-size: 120%;"&gt;    &lt;!--router-link来指定跳转的路径--&gt;    &lt;span&gt;      &lt;router-link to="/login"&gt;登录&lt;/router-link&gt;    &lt;/span&gt;    &lt;span&gt;      &lt;router-link to="/register"&gt;注册&lt;/router-link&gt;    &lt;/span&gt;    &lt;hr /&gt;    &lt;div&gt;      &lt;!--vue-router的锚点--&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;script src="../js/vue.js"&gt;&lt;/script&gt;  &lt;script src="https://unpkg.com/vue-router/dist/vue-router.js"&gt;&lt;/script&gt;  &lt;script src="./login.js"&gt;&lt;/script&gt;  &lt;script src="./register.js"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;    // 定义路由    const routes = [{        path: '/login',        component: loginForm      },      {        path: '/register',        component: registerForm      }    ]    // 创建 router 实例，然后传 routes 配置    const router = new VueRouter({      routes // (缩写) 相当于 routes: routes    })    var vm = new Vue({      el: "#app",      router    })  &lt;/script&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过 router-link 指定一个跳转链接，当点击时，会触发 vue-router 的路由功能。</li><li>通过 router-view 来指定一个锚点，当路由的路径匹配时，vue-router 会自动把对应组件放到锚点位置进行渲染。</li><li>创建 VueRouter 对象，并指定路由参数</li><li>routes：路由规则的数组，可以指定多个对象，每个对象是一条路由规则，包含以下属性：</li><li><ul><li>path：路由的路径</li><li>component：组件名称</li></ul></li></ul><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>经常的，像 <code>/user/foo</code> 和 <code>/user/bar</code> 、 <code>/user/100</code> 和 <code>/user/101</code> 映射到同个组件上，就需要用到动态路由配置。简单的，我们可以用 <code>:</code></p><p>一个 “路径参数” 使用冒号 <code>:</code> 标记。当匹配到一个路由时，参数值会被设置到 <code>this.$route.params</code>，可以在每个组件内使用。</p><pre class="line-numbers language-none"><code class="language-none">routes: [  // 动态路径参数 以冒号开头  { path: '/user/:id', component: User }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;{{ $route.params.id }}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>模式</th><th>匹配路径</th><th>$route.params</th></tr></thead><tbody><tr><td>/user/:username</td><td>/user/evan</td><td><code>{ username: 'evan' }</code></td></tr><tr><td>/user/:username/post/:post_id</td><td>/user/evan/post/123</td><td><code>{ username: 'evan', post_id: '123' }</code></td></tr></tbody></table><p>除了 <code>$route.params</code> 外，<code>$route</code> 对象还提供了其它有用的信息，例如，<code>$route.query</code> (如果 URL 中有查询参数)、<code>$route.hash</code> 等等。</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><pre class="line-numbers language-none"><code class="language-none">const router = new VueRouter({  routes: [    { path: '/user/:id', component: User,     children: [       {         // 当 /user/:id/profile 匹配成功，         // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中         path: 'profile',         component: UserProfile       },       {         // 当 /user/:id/posts 匹配成功         // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中         path: 'posts',         component: UserPosts       }     ]    }  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>你可以在创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称。</p><pre class="line-numbers language-none"><code class="language-none">const router = new VueRouter({  routes: [    {      path: '/user/:userId',      name: 'user',      component: User    }  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要链接到一个命名路由，可以给 <code>router-link</code> 的 <code>to</code> 属性传一个对象：</p><pre class="line-numbers language-none"><code class="language-none">&lt;router-link :to="{ name: 'user', params: { userId: 123 }}"&gt;User&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这跟代码调用 <code>router.push()</code> 是一回事，具体后面介绍。</p><pre class="line-numbers language-none"><code class="language-none">router.push({ name: 'user', params: { userId: 123 }})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h2><h3 id="router-push"><a href="#router-push" class="headerlink" title="router.push()"></a>router.push()</h3><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td>``</td><td><code>router.push(...)</code></td></tr></tbody></table><p><strong>在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><p>想要导航到不同的 URL，则使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p><pre class="line-numbers language-none"><code class="language-none">// 字符串router.push('home')// 对象router.push({ path: 'home' })// 命名的路由，(name -&gt; params)router.push({ name: 'user', params: { userId: '123' }})// 带查询参数，变成 /register?plan=private (path -&gt; query)router.push({ path: 'register', query: { plan: 'private' }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果提供了 <code>path</code>，<code>params</code> 会被忽略。</strong></p><pre class="line-numbers language-none"><code class="language-none">const userId = '123'router.push({ name: 'user', params: { userId }}) // -&gt; /user/123router.push({ path: `/user/${userId}` }) // -&gt; /user/123// 这里的 params 不生效router.push({ path: '/user', params: { userId }}) // -&gt; /user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace()"></a>router.replace()</h3><p>跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td>``</td><td><code>router.replace(...)</code></td></tr></tbody></table><h3 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h3><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p><p>例子</p><pre class="line-numbers language-none"><code class="language-none">// 在浏览器记录中前进一步，等同于 history.forward()router.go(1)// 后退一步记录，等同于 history.back()router.go(-1)// 前进 3 步记录router.go(3)// 如果 history 记录不够用，那就默默地失败呗router.go(-100)router.go(100)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)const store = new Vuex.Store({  state: {    count: 0  },  mutations: {    increment (state) {      state.count++    }  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，你可以通过 <code>store.state</code> 来获取状态对象，以及通过 <code>store.commit</code> 方法触发状态变更：</p><pre class="line-numbers language-none"><code class="language-none">store.commit('increment')console.log(store.state.count) // -&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了在 Vue 组件中访问 <code>this.$store</code> property，你需要为 Vue 实例提供创建好的 store。Vuex 提供了一个从根组件向所有子组件，以 <code>store</code> 选项的方式“注入”该 store 的机制：</p><pre class="line-numbers language-none"><code class="language-none">new Vue({  el: '#app',  store,  methods: {    increment() {      this.$store.commit('increment')      console.log(this.$store.state.count)    }  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：我们通过提交 mutation 的方式，而非直接改变 <code>store.state.count</code>，是因为我们想要更明确地追踪到状态的变化。</p><p>参考资料</p><p><a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></p><p><a href="https://vuex.vuejs.org/zh/">https://vuex.vuejs.org/zh/</a></p><p><a href="https://mp.weixin.qq.com/s/KrkEpUjWoQ35ZjC0CP8slQ">https://mp.weixin.qq.com/s/KrkEpUjWoQ35ZjC0CP8slQ</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
